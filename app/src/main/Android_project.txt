/* 
File: .\java\com\example\meowtify\DatabaseHelper.java     
/* 
package com.example.meowtify;

import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.google.firebase.FirebaseApp;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class DatabaseHelper {
    FirebaseDatabase database = FirebaseDatabase.getInstance();
    DatabaseReference myRef;
    public DatabaseHelper(String myRef) {
        this.myRef = database.getReference(myRef);
    }
    public DatabaseHelper() {
        this.myRef = database.getReference("Meowfy");
    }
    public DatabaseReference getMyRef() {
        return myRef;
    }
    public String getKey() {
        return this.myRef.push().getKey();
    }
    public void updateSong(Song novaSong) {
        myRef.child(novaSong.getIdSong()).setValue(novaSong);
    }
    public void addSong(Song value) {
        myRef.child(getKey()).setValue(value);
    }
    public void updatePlaylist(Playlist novaPlaylist) {
        myRef.child(novaPlaylist.getIdPlaylist()).setValue(novaPlaylist);
    }
    public void addPlaylist(Playlist value) {
        myRef.child(getKey()).setValue(value);
    }
}/* 
File: .\java\com\example\meowtify\Utilitis.java     
/* 
package com.example.meowtify;

import android.content.Context;
import android.os.Build;
import android.os.Bundle;

import androidx.annotation.RequiresApi;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentActivity;

import com.android.volley.AuthFailureError;
import com.example.meowtify.activities.MainActivity;
import com.example.meowtify.fragments.AlbumFragment;
import com.example.meowtify.fragments.ArtistFragment;
import com.example.meowtify.fragments.OnFragmentChanged;
import com.example.meowtify.fragments.PlaylistFragment;
import com.example.meowtify.fragments.PlayerFragment;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Utilitis {
    @RequiresApi(api = Build.VERSION_CODES.O)
    public static void navigationToAAP(GeneralItem generalItem, Context context) {
        Bundle bundle = new Bundle();
        bundle.putSerializable("generalItem", generalItem);
        String fragmentTag;
        Fragment fragment;
         switch (generalItem.getType()){
            case playlist:
                fragment =  new PlaylistFragment();
               fragmentTag="Playlist";
                break;
            case artist:
                fragment =  new ArtistFragment();
                fragmentTag="Artist";
                break;
            case album:
                fragment =  new AlbumFragment();
                fragmentTag="Album";
                break;
            default:
                bundle = new Bundle();

                if(Type.valueOf(generalItem.getExtra2()) != Type.track){
                    bundle.putString("idList", generalItem.getId());
                    bundle.putInt("posList",Integer.parseInt(generalItem.getExtra1()));
                }
                bundle.putSerializable("typeList", Type.valueOf(generalItem.getExtra2()));
                bundle.putSerializable("generalItem", generalItem);
                fragment =  new PlayerFragment();
                fragmentTag="Player";

        }

        fragment.setArguments(bundle);
        MainActivity.currentFragment=fragment;

        ((FragmentActivity) context).getSupportFragmentManager().beginTransaction()
                .replace(R.id.fragment_container, fragment,fragmentTag).commit();

    MainActivity.onFragmentChanged.OnFragmentChanged();
    }
    public static Map<String, String> getHeaders(String token) throws AuthFailureError {
        Map<String, String> headers = new HashMap<>();
        String auth = "Bearer " + token;
        headers.put("Authorization", auth);
        return headers;
    }
}
/* 
File: .\java\com\example\meowtify\VolleyCallBack.java     
/* 
package com.example.meowtify;

public interface VolleyCallBack {

    void onSuccess();
}/* 
File: .\java\com\example\meowtify\activities\MainActivity.java     
/* 
package com.example.meowtify.activities;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.text.method.ScrollingMovementMethod;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.fragments.MainFragment;
import com.example.meowtify.fragments.OnFragmentChanged;
import com.example.meowtify.fragments.PlayerFragment;
import com.example.meowtify.fragments.SearchFragment;
import com.example.meowtify.fragments.YourLibraryFragment;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Song;
 import com.example.meowtify.models.Type;
import com.example.meowtify.services.AlbumService;
import com.example.meowtify.services.ArtistService;
import com.example.meowtify.services.MediaPlayerService;
import com.example.meowtify.services.SongService;
import com.example.meowtify.services.notifications.CreateNotification;
import com.example.meowtify.services.notifications.OnClearFromRecentService;
import com.example.meowtify.services.notifications.Playable;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.spotify.sdk.android.authentication.AuthenticationClient;
import com.spotify.sdk.android.authentication.AuthenticationRequest;
import com.spotify.sdk.android.authentication.AuthenticationResponse;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class MainActivity extends AppCompatActivity implements OnFragmentChanged, Playable {
    private static final String CLIENT_ID = "8175f0284ba94a128cca4b9d788449a6";
    private static final String REDIRECT_URI = "http://com.example.meowtify/callback";
    // private static final String REDIRECT_URI = " com.example.meowtify://callback";
    private static final int REQUEST_CODE = 1337;
    private static final String SCOPES = "user-read-playback-position,user-read-private,user-read-email,playlist-read-private,user-library-read,user-library-modify,user-top-read,playlist-read-collaborative,ugc-image-upload,user-follow-read,user-follow-modify,user-read-playback-state,user-modify-playback-state,user-read-currently-playing,user-read-recently-played";
    public static boolean inPlayerForFirstTime = false;
    public static Fragment currentFragment;
    public static OnFragmentChanged onFragmentChanged;
    public List<Song> songs = new ArrayList<>();
    public int position;
    BottomNavigationView navigationMenu;
    ImageView bottomSheetImage;
    PlayerFragment viewer = null;
    private SharedPreferences.Editor editor;
    private TextView userView;
    private TextView songView;
   String testAlbum="019Bh0y5hMxnvTqL1PXDFx";
    private CoordinatorLayout fragmentCordinator;
    private TextView songTitle;
    private TextView subtitle;
    private RelativeLayout relativeLayoutBottomSheet;
    private Button addBtn;
    private ImageButton playButton;
    private ImageButton favButton;
    private Song song;
    private SongService songService;
    private AlbumService albumService;
    private ArrayList<Song> recentlyPlayedTracks;

    //bottomSheetVariables
    private Type songType;
    private String idListSong;
    NotificationManager notificationManager;
    public Intent mediaPlayerServiceIntent;
    public boolean mBounded;
    public MediaPlayerService mediaPlayerService;
    public ServiceConnection mConnection = new ServiceConnection() {
        @Override
        public void onServiceDisconnected(ComponentName name) {
            Toast.makeText(getApplicationContext(), "Service is disconnected", Toast.LENGTH_LONG).show();
            mBounded = false;
            mediaPlayerService = null;
        }

        @Override
        public void onServiceConnected(ComponentName name, IBinder service) {
            Toast.makeText(getApplicationContext(), "Service is connected", Toast.LENGTH_LONG).show();
            mBounded = true;
            MediaPlayerService.LocalBinder mLocalBinder = (MediaPlayerService.LocalBinder) service;
            mediaPlayerService = mLocalBinder.getServerInstance();
        }
    };

    private View.OnClickListener addListener = v -> {
        songService.addSongToLibrary(this.song);
        if (recentlyPlayedTracks.size() > 0) {
            recentlyPlayedTracks.remove(0);

        }

        updateSong();
        //  getArtists();
        //   songService.getFeaturedPlayList(() -> {
        //     List<Playlist> p =  songService.getFeaturedPlayList(() -> {

        //   });
        // songService.getAPlayListByRef(() -> {
        // },"https://api.spotify.com/v1/playlists/37i9dQZF1DXdPec7aLTmlC");
        // });
        //pl.getUserPlayLists(()->{},10,0);
    };

    private void getTracks() {
        songService.getRecentlyPlayedTracks(() -> {
            recentlyPlayedTracks = songService.getSongs();
            updateSong();
        });
    }


    private void updateSong() {
        for (Song s : recentlyPlayedTracks) {
            System.out.println(s.toString());
        }
        if (recentlyPlayedTracks.size() > 0) {
            songView.setText(recentlyPlayedTracks.get(0).getName());
            song = recentlyPlayedTracks.get(0);
        }
    }

    BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            System.out.println("brodcast");
            String action = intent.getExtras().getString("actionname");
            switch (action) {
                case CreateNotification.ACTION_PREVIUOS:
                    onTrackPrevious();
                    System.out.println("previous");
                    break;
                case CreateNotification.ACTION_PLAY:
                    if (MediaPlayerService.isPlaying()) {
                        System.out.println("pause");
                        onTrackPause();
                    } else {
                        System.out.println("play");
                        onTrackPlay();
                    }
                    break;
                case CreateNotification.ACTION_NEXT:
                    System.out.println("next");
                    onTrackNext();
                    break;
            }
        }
    };

    private void createChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel channel = new NotificationChannel(CreateNotification.CHANNEL_ID,
                    "Meowfy", NotificationManager.IMPORTANCE_LOW);

            notificationManager = getSystemService(NotificationManager.class);
            if (notificationManager != null) {
                notificationManager.createNotificationChannel(channel);
            }
        }
    }

    static  Album a;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        AuthenticationRequest.Builder builder =
                new AuthenticationRequest.Builder(CLIENT_ID, AuthenticationResponse.Type.TOKEN, REDIRECT_URI);

        builder.setScopes(new String[]{"streaming"});
        AuthenticationRequest request = builder.build();

        AuthenticationClient.openLoginActivity(this, REQUEST_CODE, request);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Bundle b = getIntent().getExtras();
        relativeLayoutBottomSheet = findViewById(R.id.bottomSheetLayout);
        songTitle = findViewById(R.id.songTitle);
        subtitle = findViewById(R.id.subtitle);
        playButton = findViewById(R.id.playSong);
        bottomSheetImage = findViewById(R.id.currentSongImage);
        fragmentCordinator = findViewById(R.id.coordinatorLayout);
        onFragmentChanged = this;
        albumService= new AlbumService(getApplicationContext());

        albumService.getAlbumByRef(()->{
              a = albumService.getLastAlbum();
            albumService.saveAlbumToUserLibrary(a);
        },"07bYtmE3bPsLB6ZbmmFi8d");
        if (savedInstanceState == null) {
            currentFragment = new MainFragment();
            changeFragment(currentFragment, "Home");
        }
        apiStuff();
        navigationMenu = findViewById(R.id.bottomNavigation);
        navigationMenu.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.home:
                        changeFragment(new MainFragment(), "Home");
                        System.out.println("home");
                        return true;
                    case R.id.share:
                        albumService.unsaveAnAlbum(a);
                        changeFragment(new SearchFragment(), "Share");

                        System.out.println("share");
                        return true;
                    case R.id.library:
                        changeFragment(new YourLibraryFragment(), "Library");
                        System.out.println("library");
                        return true;
                }
                System.out.println("null");
                return false;
            }
        });
        relativeLayoutBottomSheet.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.O)
            @Override
            public void onClick(View v) {
                GeneralItem gi = PlayerFragment.songService.lastSearchedSong.toGeneralItem();

                gi.setId(idListSong);
                gi.setExtra1(String.valueOf(position));
                gi.setExtra2(songType.toString());

                System.out.println(gi.toString());
                Utilitis.navigationToAAP(gi, v.getContext());
            }
        });
        playButton.setOnClickListener(new View.OnClickListener() {
            @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
            @Override
            public void onClick(View v) {
                if (MediaPlayerService.isPlaying()){
                    onTrackPause();
                }else {
                    onTrackPlay();
                }}
        });

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            createChannel();
            registerReceiver(broadcastReceiver, new IntentFilter("TRACKS_TRACKS"));
            getApplicationContext().startService(new Intent(getApplicationContext(), OnClearFromRecentService.class));
        }
    }


    private Fragment getVisibleFragment() {
        FragmentManager fragmentManager = MainActivity.this.getSupportFragmentManager();
        List<Fragment> fragments = fragmentManager.getFragments();
        for (Fragment fragment : fragments) {
            if (fragment != null && fragment.isVisible())
                return fragment;
        }
        return null;
    }

    private void apiStuff() {
         songService = new SongService(getApplicationContext());
    }

    private void changeFragment(Fragment currentFragment, String tag) {
        getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, currentFragment, tag).commit();
        MainActivity.currentFragment = currentFragment;
        if (tag != null)
            onFragmentChanged.OnFragmentChanged();

    }


    private void startMainActivity() {
        Intent newintent = new Intent(MainActivity.this, MainActivity.class);
        startActivity(newintent);
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
        super.onActivityResult(requestCode, resultCode, intent);

        if (requestCode == REQUEST_CODE) {
            AuthenticationResponse response = AuthenticationClient.getResponse(resultCode, intent);

            switch (response.getType()) {
                case TOKEN:
                    break;

                // Auth flow returned an error
                case ERROR:
                    break;

                // Most likely auth flow was cancelled
                default:
                    // Handle other cases
            }
        }
    }

    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Override
    public void OnFragmentChanged() {
        System.out.println("reproductorforfirsttime" + inPlayerForFirstTime);
        if (currentFragment.getTag().equals("Player") || !inPlayerForFirstTime) {
            relativeLayoutBottomSheet.setVisibility(View.INVISIBLE);

        } else if (inPlayerForFirstTime && PlayerFragment.songService != null) {
            if(PlayerFragment.type == Type.track) songType = Type.album;
            else songType = PlayerFragment.type;
            idListSong = PlayerFragment.idList;
            System.out.println("type list "+songType+"\n id list "+idListSong+"\nposicion list "+ position);

            Song s = PlayerFragment.songService.lastSearchedSong;
            songTitle.setText(s.getName());
            songTitle.setSelected(true);
            subtitle.setText(s.getArtists().get(0).getName());
            Picasso.with(getApplicationContext()).load(s.getAlbum().getImages().get(0).url).into(bottomSheetImage);

            relativeLayoutBottomSheet.setVisibility(View.VISIBLE);
            fragmentCordinator.setPadding(0,0,0,120);
            if (MediaPlayerService.isPlaying()){
                playButton.setImageDrawable(getDrawable(android.R.drawable.ic_media_pause));

            }else {
                playButton.setImageDrawable(getDrawable(android.R.drawable.ic_media_play));


            }
        }

    }

    @Override
    public void onTrackPrevious() {
        if (position - 1 > 0) {
            position--;
            ChangeSong(songs.get(position));
            CreateNotification.createNotification(getApplicationContext(), songs.get(position), android.R.drawable.ic_media_pause, position, songs.size() - 1);
        } else {
            Toast.makeText(getApplicationContext(), "No more Songs", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onTrackPlay() {
        if(inPlayerForFirstTime){
            CreateNotification.createNotification(getApplicationContext(), songs.get(position),
                    android.R.drawable.ic_media_pause, position, songs.size() - 1);
            MediaPlayerService.resume();
            playButton.setImageDrawable(getDrawable(android.R.drawable.ic_media_pause));
        }
    }

    @Override
    public void onTrackPause() {
        if(inPlayerForFirstTime){
            CreateNotification.createNotification(getApplicationContext(), songs.get(position),
                    android.R.drawable.ic_media_play, position, songs.size() - 1);
            MediaPlayerService.pause();
            playButton.setImageDrawable(getDrawable(android.R.drawable.ic_media_play));
        }
    }

    @Override
    public void onTrackNext() {
        if (position + 1 < songs.size()) {
            position++;
            CreateNotification.createNotification(getApplicationContext(), songs.get(position),
                    android.R.drawable.ic_media_pause, position, songs.size() - 1);

            ChangeSong(songs.get(position));

        } else {
            Toast.makeText(getApplicationContext(), "No more Songs", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onTrackEnd() {
        onTrackNext();
    }

    private void updateSongByAPI() {
        getApplicationContext().startService(mediaPlayerServiceIntent);
        getApplicationContext().bindService(mediaPlayerServiceIntent, mConnection, BIND_AUTO_CREATE);

        song = songs.get(position);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            getApplicationContext().startService(new Intent(getApplicationContext(), OnClearFromRecentService.class));
        }

        if (mBounded)
            mediaPlayerService.changeSong(song);
        onTrackPlay();

        songTitle.setText(song.getName());
        songTitle.setSelected(true);
        subtitle.setText(song.getArtists().get(0).getName());
        Picasso.with(getApplicationContext()).load(song.getAlbum().getImages().get(0).url).into(bottomSheetImage);
    }

    public void ChangeSong(Song s) {
        if(!currentFragment.getTag().equals("Player")){
            songService.getASongByRef(this::updateSongByAPI, s.getId());
        }else{
            PlayerFragment reproductor = ((PlayerFragment) getSupportFragmentManager().findFragmentByTag("Player"));

            reproductor.ChangeSong(s);
        }
    }
}/* 
File: .\java\com\example\meowtify\activities\SplashActivity.java     
/* 
package com.example.meowtify.activities;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.ProgressBar;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;

import com.android.volley.RequestQueue;
import com.android.volley.toolbox.Volley;
import com.example.meowtify.R;
import com.example.meowtify.models.User;
import com.example.meowtify.models.UserService;
import com.spotify.sdk.android.authentication.AuthenticationClient;
import com.spotify.sdk.android.authentication.AuthenticationRequest;
import com.spotify.sdk.android.authentication.AuthenticationResponse;

public class SplashActivity extends AppCompatActivity {


    private static final String CLIENT_ID = "8175f0284ba94a128cca4b9d788449a6";
    private static final String REDIRECT_URI = "http://com.example.meowtify/callback";
    private static final int REQUEST_CODE = 1337;
    private static final String SCOPES = "user-read-playback-position,user-read-private,user-read-email,playlist-read-private,user-library-read,user-library-modify,user-top-read,playlist-read-collaborative,ugc-image-upload,user-follow-read,user-follow-modify,user-read-playback-state,user-modify-playback-state,user-read-currently-playing,user-read-recently-played,playlist-modify-public,playlist-modify-private";
    Fragment currentFragment;
    private SharedPreferences.Editor editor;
    private SharedPreferences msharedPreferences;
    // private static final String REDIRECT_URI = " com.example.meowtify://callback";
    private ProgressBar loading;
    private RequestQueue queue;
    private Button login;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        setTheme(R.style.Theme_AppCompat);
        setTheme(R.style.Theme_AppCompat);
        super.onCreate(savedInstanceState);

        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getSupportActionBar().hide();
        setContentView(R.layout.activity_splash);
        login = findViewById(R.id.buttonLogin);
        loading = findViewById(R.id.loading);
        login.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                loading.setVisibility(View.VISIBLE);
                authenticateSpotify();


                msharedPreferences = v.getContext().getSharedPreferences("SPOTIFY", 0);
                queue = Volley.newRequestQueue(v.getContext());
            }
        });
    }

    private void authenticateSpotify() {
        AuthenticationRequest.Builder builder = new AuthenticationRequest.Builder(CLIENT_ID, AuthenticationResponse.Type.TOKEN, REDIRECT_URI);
        builder.setScopes(new String[]{SCOPES});
        AuthenticationRequest request = builder.build();
        AuthenticationClient.openLoginActivity(this, REQUEST_CODE, request);
    }

    private void waitForUserInfo() {
        UserService userService = new UserService(queue, msharedPreferences);
        userService.get(() -> {
            User user = userService.getUser();
            editor = getSharedPreferences("SPOTIFY", 0).edit();
            editor.putString("userid", user.id);
            editor.putString("username", user.getDisplayName());
            Log.d("STARTING", "GOT USER INFORMATION");
            // We use commit instead of apply because we need the information stored immediately
            editor.commit();
            startMainActivity();
        });
    }

    private void startMainActivity() {
        Intent newintent = new Intent(SplashActivity.this, MainActivity.class);
        loading.setVisibility(View.INVISIBLE);
        startActivity(newintent);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
        super.onActivityResult(requestCode, resultCode, intent);

        if (requestCode == REQUEST_CODE) {
            AuthenticationResponse response = AuthenticationClient.getResponse(resultCode, intent);

            switch (response.getType()) {
                case TOKEN:
                    editor = getSharedPreferences("SPOTIFY", 0).edit();
                    editor.putString("token", response.getAccessToken());
                    Log.d("STARTING", "GOT AUTH TOKEN");
                    editor.apply();
                    waitForUserInfo();
                    break;

                case ERROR:
                    break;

                default:

            }
        }
    }
}/* 
File: .\java\com\example\meowtify\adapters\AdapterLibraryList.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.FragmentActivity;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.fragments.CreatePlaylistFragment;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterLibraryList extends RecyclerView.Adapter<AdapterLibraryList.LibraryListHolder> {
    List<GeneralItem> items;
    Context context;

    public AdapterLibraryList(List<GeneralItem> items, Context context) {
        this.items = items;
        this.context = context;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public LibraryListHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_yourlibrary, parent, false);
        return new LibraryListHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull LibraryListHolder holder, int position) {
        holder.bindData(items.get(position));
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class LibraryListHolder extends RecyclerView.ViewHolder {
        TextView title, subTitle;
        ImageView image;

        public LibraryListHolder(@NonNull View itemView) {
            super(itemView);

            title = itemView.findViewById(R.id.title_library);
            subTitle = itemView.findViewById(R.id.subtitle_library);
            image = itemView.findViewById(R.id.image_library);
        }

        public void bindData(GeneralItem generalItem) {
            System.out.println("GeneralItem" + generalItem.toString());
            title.setText(generalItem.getName());
            if (generalItem.getExtra1() != null) {

                String subtitle = "";
                if (generalItem.getType() == Type.playlist) subtitle = "by ";
                subtitle += generalItem.getExtra1();
                subTitle.setText(subtitle);

                Picasso.with(context).load(generalItem.getImage()).
                        resize(220, 220).into(image);
                image.setPadding(0, 0, 0, 0);

                itemView.setOnClickListener(view -> Utilitis.navigationToAAP(generalItem, context));
            } else {
                image.setImageResource(R.drawable.ic_baseline_add_24);
                image.setPadding(80, 80, 80, 80);
                itemView.setOnClickListener(view -> {
                    Bundle bundle = new Bundle();
                    bundle.putInt("coutList", getItemCount());
                    CreatePlaylistFragment fragment = new CreatePlaylistFragment();
                    fragment.setArguments(bundle);

                    ((FragmentActivity) view.getContext()).getSupportFragmentManager().beginTransaction()
                            .replace(R.id.fragment_container, fragment).commit();
                });
            }
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterLibraryListAdd1.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.services.ArtistService;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterLibraryListAdd1 extends RecyclerView.Adapter<AdapterLibraryListAdd1.LibraryListAdd1Holder> {
    List<GeneralItem> items;
    Context context;

    public AdapterLibraryListAdd1(List<GeneralItem> items, Context context) {
        this.items = items;
        this.context = context;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public LibraryListAdd1Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_yourlibrary_recommended1, parent, false);
        return new LibraryListAdd1Holder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull LibraryListAdd1Holder holder, int position) {
        holder.bindData(items.get(position), position);
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class LibraryListAdd1Holder extends RecyclerView.ViewHolder {
        TextView nameArtist, numSongs;
        ImageView image;
        Button followButton;

        public LibraryListAdd1Holder(@NonNull View itemView) {
            super(itemView);

            nameArtist = itemView.findViewById(R.id.name_artist);
            numSongs = itemView.findViewById(R.id.num_songs);
            image = itemView.findViewById(R.id.image_library);
            followButton = itemView.findViewById(R.id.follow_artist);
        }

        public void bindData(GeneralItem generalItem, int position) {
            nameArtist.setText(generalItem.getName());
            String subtitle = generalItem.getExtra1();
            numSongs.setText(subtitle);
            Picasso.with(context).load(generalItem.getImage()).
                    resize(220, 220).into(image);
            ;
            followButton.setOnClickListener(view -> {
                ArtistService artistService = new ArtistService(context);
                Artist a = new Artist();
                a.setId(generalItem.getId());
                artistService.followAnArtist(a);
                items.remove(position);
                notifyDataSetChanged();
            });

            itemView.setOnClickListener(view -> Utilitis.navigationToAAP(generalItem, context));
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterLibraryListAdd2.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.models.GeneralItem;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterLibraryListAdd2 extends RecyclerView.Adapter<AdapterLibraryListAdd2.LibraryListAdd2Holder> {
    List<GeneralItem> items;
    Context context;

    public AdapterLibraryListAdd2(List<GeneralItem> items, Context context) {
        this.items = items;
        this.context = context;
    }

    @NonNull
    @Override
    public LibraryListAdd2Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_yourlibrary_recommended2, parent, false);
        return new LibraryListAdd2Holder(v);
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @Override
    public void onBindViewHolder(@NonNull LibraryListAdd2Holder holder, int position) {
        holder.bindData(items.get(position), position);
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class LibraryListAdd2Holder extends RecyclerView.ViewHolder {
        TextView nameAlbum, nameArtist;
        ImageView image;
        ImageButton followButton;

        public LibraryListAdd2Holder(@NonNull View itemView) {
            super(itemView);

            nameAlbum = itemView.findViewById(R.id.name_album1);
            nameArtist = itemView.findViewById(R.id.name_autor);
            image = itemView.findViewById(R.id.image_library);
            followButton = itemView.findViewById(R.id.favorits_album1);
        }

        public void bindData(GeneralItem generalItem, int position) {
            nameAlbum.setText(generalItem.getName());
            nameArtist.setText(generalItem.getExtra1());
            Picasso.with(context).load(generalItem.getImage()).
                    resize(220, 220).into(image);
            followButton.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    //Todo: metodo para añadir albunes a favoritos

                    items.remove(position);
                    notifyDataSetChanged();
                }
            });

            itemView.setOnClickListener(view -> Utilitis.navigationToAAP(generalItem, context));
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterMainList.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterMainList extends RecyclerView.Adapter<AdapterMainList.MainListHolder> {
    List<GeneralItem> items;
    int width;
    Context context;

    public AdapterMainList(List<GeneralItem> items, Context context, int width) {
        this.items = items;
        this.context = context;
        this.width = width;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public MainListHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_list_main, parent, false);
        return new MainListHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull MainListHolder holder, int position) {
        holder.bindData(items.get(position));
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class MainListHolder extends RecyclerView.ViewHolder {
        TextView title, subTitle;
        ImageView image;

        public MainListHolder(@NonNull View itemView) {
            super(itemView);

            title = itemView.findViewById(R.id.titol_main);
            subTitle = itemView.findViewById(R.id.subtitol_main);
            image = itemView.findViewById(R.id.image_main);

        }

        public void bindData(GeneralItem generalItem) {
            if (generalItem.getName().length() > 18) {
                generalItem.setName(generalItem.getName().substring(0, 17) + "...");
            }
            title.setText(generalItem.getName());

            String subtitle = "";
            if (generalItem.getType() != Type.artist) {
                if (generalItem.getType() != null) {
                    if (generalItem.getType() == Type.track) subtitle = "song";
                    else subtitle = generalItem.getType().toString();
                    if (generalItem.getExtra1() != null && generalItem.getType() != Type.playlist)
                        subtitle += " · " + generalItem.getExtra1();
                }
            } else {
                RelativeLayout.LayoutParams layoutParams =
                        (RelativeLayout.LayoutParams) title.getLayoutParams();
                layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
                title.setLayoutParams(layoutParams);
            }

            if (subtitle.length() > 18) {
                subtitle = subtitle.substring(0, 17) + "...";
            }
            subTitle.setText(subtitle);
            Picasso.with(context).load(generalItem.getImage()).
                    resize(width, width).into(image);

            itemView.setOnClickListener(view -> {
                if (generalItem.getType() == Type.track)
                    generalItem.setExtra2(generalItem.getType().toString());

                Utilitis.navigationToAAP(generalItem, context);
            });
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterSearchList.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.fragments.SearchFragment;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterSearchList extends RecyclerView.Adapter<AdapterSearchList.SearchListHolder> {
    List<GeneralItem> items;
    Context context;
    SearchFragment searchFragment;

    public AdapterSearchList(List<GeneralItem> items, Context context, SearchFragment searchFragment) {
        this.items = items;
        this.context = context;
        this.searchFragment = searchFragment;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public SearchListHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_search, parent, false);
        return new SearchListHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull SearchListHolder holder, int position) {
        holder.bindData(items.get(position));
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class SearchListHolder extends RecyclerView.ViewHolder {
        TextView title, subTitle;
        ImageView image;

        public SearchListHolder(@NonNull View itemView) {
            super(itemView);

            title = itemView.findViewById(R.id.title_search);
            subTitle = itemView.findViewById(R.id.subtitle_search);
            image = itemView.findViewById(R.id.image_search);
        }

        public void bindData(GeneralItem generalItem) {
            title.setText(generalItem.getName());
            String subtitle = "";
            if (generalItem.getType() != null) {
                if (generalItem.getType() == Type.track) subtitle = "song";
                else subtitle = generalItem.getType().toString();
            }
            if (generalItem.getExtra1() != null && generalItem.getType() != Type.artist)
                subtitle += " · " + generalItem.getExtra1();
            subTitle.setText(subtitle);
            Picasso.with(context).load(generalItem.getImage()).
                    resize(130, 130).into(image);

            itemView.setOnClickListener(view -> {
                if (generalItem.getType() == Type.track) generalItem.setExtra2("track");

                Utilitis.navigationToAAP(generalItem, context);

                if (!searchFragment.checkRecentlySearch(generalItem)) {
                    searchFragment.recentlySearchList.add(generalItem);
                    searchFragment.adapterRecently.notifyDataSetChanged();
                }
            });
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterSearchRecentlyList.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.fragments.SearchFragment;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterSearchRecentlyList extends RecyclerView.Adapter<AdapterSearchRecentlyList.SearchListAdd2Holder> {
    List<GeneralItem> items;
    Context context;

    public AdapterSearchRecentlyList(List<GeneralItem> items, Context context) {
        this.items = items;
        this.context = context;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    @NonNull
    @Override
    public SearchListAdd2Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_recently_search, parent, false);
        return new SearchListAdd2Holder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull SearchListAdd2Holder holder, int position) {
        holder.bindData(items.get(position), position);
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public class SearchListAdd2Holder extends RecyclerView.ViewHolder {
        TextView title, subtitle;
        ImageView image;
        ImageButton deleteSearch;

        public SearchListAdd2Holder(@NonNull View itemView) {
            super(itemView);

            title = itemView.findViewById(R.id.title_search);
            subtitle = itemView.findViewById(R.id.subtitle_search);
            image = itemView.findViewById(R.id.image_search);
            deleteSearch = itemView.findViewById(R.id.delete_search);
        }

        public void bindData(GeneralItem generalItem, int position) {
            title.setText(generalItem.getName());
            String subTitle = "";
            if (generalItem.getType() != null) {
                if (generalItem.getType() == Type.track) subTitle = "song";
                else subTitle = generalItem.getType().toString();
            }
            if (generalItem.getExtra1() != null && generalItem.getType() != Type.artist)
                subTitle += " · " + generalItem.getExtra1();
            subtitle.setText(subTitle);
            Picasso.with(context).load(generalItem.getImage()).
                    resize(130, 130).into(image);
            deleteSearch.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    items.remove(position);
                    notifyDataSetChanged();
                }
            });

            itemView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (generalItem.getType() == Type.track) generalItem.setExtra2("track");

                    if (SearchFragment.searched)
                        SearchFragment.recentlySearchList.add(generalItem);
                    Utilitis.navigationToAAP(generalItem, context);
                    SearchFragment.searched = false;
                }
            });
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\AdapterSongsList.java     
/* 
package com.example.meowtify.adapters;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.squareup.picasso.Picasso;

import java.util.List;

public class AdapterSongsList extends RecyclerView.Adapter<AdapterSongsList.SearchListHolder> {
    List<GeneralItem> items;
    Context context;
    int width;
    Type listType;
    String idList;

    public AdapterSongsList(List<GeneralItem> items, Context context, int width, Type listType, String idList) {
        this.items = items;
        this.context = context;
        this.width = width;
        this.listType = listType;
        this.idList = idList;
    }

    public void setItems(List<GeneralItem> items) {
        this.items = items;
        notifyDataSetChanged();
    }

    public void setIdList(String idList) {
        this.idList = idList;
    }

    @NonNull
    @Override
    public SearchListHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_search, parent, false);
        return new SearchListHolder(v);
    }

    @Override
    public void onBindViewHolder(@NonNull SearchListHolder holder, int position) {
        holder.bindData(items.get(position));
    }

    @Override
    public int getItemCount() {
        return items.size();
    }

    public void setListType(Type listType) {
        this.listType = listType;
        notifyDataSetChanged();
    }

    public class SearchListHolder extends RecyclerView.ViewHolder {
        TextView title, subTitle;
        ImageView image;

        public SearchListHolder(@NonNull View itemView) {
            super(itemView);

            title = itemView.findViewById(R.id.title_search);
            subTitle = itemView.findViewById(R.id.subtitle_search);
            image = itemView.findViewById(R.id.image_search);
        }

        public void bindData(GeneralItem generalItem) {
            title.setText(generalItem.getName());
            subTitle.setText(generalItem.getExtra1());
            Picasso.with(context).load(generalItem.getImage()).
                    resize(width, width).into(image);

            itemView.setOnClickListener(view -> {
                if (listType != null) {
                    generalItem.setId(idList);
                    generalItem.setExtra1(String.valueOf(items.indexOf(generalItem)));
                    generalItem.setExtra2(listType.toString());
                } else generalItem.setExtra2(Type.track.toString());

                Utilitis.navigationToAAP(generalItem, context);
            });
        }
    }
}
/* 
File: .\java\com\example\meowtify\adapters\LibraryPagerAdapter.java     
/* 
package com.example.meowtify.adapters;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentStatePagerAdapter;

import com.example.meowtify.fragments.AlbumLibraryFragment;
import com.example.meowtify.fragments.ArtistLibraryFragment;
import com.example.meowtify.fragments.PlaylistLibraryFragment;

public class LibraryPagerAdapter extends FragmentStatePagerAdapter {

    public LibraryPagerAdapter(@NonNull FragmentManager fm) {
        super(fm);
    }

    @NonNull
    @Override
    public Fragment getItem(int position) {
        switch (position) {
            case 0:
                return new PlaylistLibraryFragment();
            case 1:
                return new ArtistLibraryFragment();
            default:
                return new AlbumLibraryFragment();
        }
    }

    @Override
    public int getCount() {
        return 3;
    }
}
/* 
File: .\java\com\example\meowtify\fragments\AlbumFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.adapters.AdapterSongsList;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.AlbumService;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


public class AlbumFragment extends Fragment {

    ImageView imagePlaylist;
    TextView nameAlbum, subtitleAlbum;
    Button buttonShuffel;
    ImageButton buttonFavorite;
    RecyclerView songs;

    AdapterSongsList adapterSongs;
    Album album;
    AlbumService albumService;

    public AlbumFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_album, container, false);
        albumService = new AlbumService(v.getContext());
        imagePlaylist = v.findViewById(R.id.image_album);
        nameAlbum = v.findViewById(R.id.name_album2);
        subtitleAlbum = v.findViewById(R.id.subname_album);
        buttonShuffel = v.findViewById(R.id.shuffel_album);
        buttonFavorite = v.findViewById(R.id.favorits_album2);
        songs = v.findViewById(R.id.songs);

        Bundle b = getArguments();
        if (b != null) {
            GeneralItem generalItem = (GeneralItem) b.getSerializable("generalItem");
            albumService.getAlbumByRef(this::updateAlbumByAPI, generalItem.getId());
        }
        buttonShuffel.setOnClickListener(view -> {
            GeneralItem generalItem = album.toGeneralItem();

            generalItem.setId(album.getId());
            generalItem.setType(Type.track);
            generalItem.setExtra1(String.valueOf(new Random().nextInt(adapterSongs.getItemCount())));
            generalItem.setExtra2(Type.album.toString());

            Utilitis.navigationToAAP(generalItem, getContext());
        });
        buttonFavorite.setOnClickListener(view -> {

            if (buttonFavorite.getTag(R.string.albunes).equals("1")) {
                buttonFavorite.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_24));
                buttonFavorite.setTag(R.string.albunes, "0");

                albumService.saveAlbumToUserLibrary(album);
            } else {
                buttonFavorite.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_border_24));
                buttonFavorite.setTag(R.string.albunes, "1");

                albumService.unsaveAnAlbum(album);
            }

        });

        List<GeneralItem> songsList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist11", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist12", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist13", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist14", null)
        ));

        adapterSongs = new AdapterSongsList(songsList, getContext(), 130, Type.album, null);
        songs.setAdapter(adapterSongs);
        songs.setLayoutManager(new LinearLayoutManager(getContext()));

        return v;
    }

    private void updateAlbumByAPI() {
        Album currentAlbum = albumService.getLastAlbum();
        final boolean[] bool = new boolean[1];
        albumService.checkIfTheUserSavedAAlbum(() -> {
                    if (albumService.isLastCheck()) {
                        buttonFavorite.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_24));
                        buttonFavorite.setTag(R.string.albunes, "0");
                    } else {
                        buttonFavorite.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_border_24));
                        buttonFavorite.setTag(R.string.albunes, "1");
                    }
                }
                , currentAlbum.getId());
        nameAlbum.setText(currentAlbum.getName());
        System.out.println("last album has" + currentAlbum.toString());
        if (currentAlbum.getImages() != null)
            Picasso.with(getContext()).load(currentAlbum.getImages().get(0).url).into(imagePlaylist);
        String subtitle = "BY " + currentAlbum.getArtistNames() + " · " + currentAlbum.getTotalTracks() + " TRACKS";

        subtitleAlbum.setText(subtitle);
        album = currentAlbum;
        adapterSongs.setItems(currentAlbum.getSongsConverted());
        adapterSongs.setIdList(album.getId());


    }
}/* 
File: .\java\com\example\meowtify\fragments\AlbumLibraryFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.adapters.AdapterLibraryList;
import com.example.meowtify.adapters.AdapterLibraryListAdd2;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.AlbumService;
import com.example.meowtify.services.SongService;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AlbumLibraryFragment extends Fragment {
    AdapterLibraryListAdd2 adapterAdd;
    AdapterLibraryList adapter;

    RecyclerView listAlbum, listRecommended;
    AlbumService albumService;
    List<Album> savedAlbums;

    public AlbumLibraryFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_artist_library, container, false);
        albumService = new AlbumService(v.getContext());
        listAlbum = v.findViewById(R.id.artistas_library);
        listRecommended = v.findViewById(R.id.recommended_library);

        List<GeneralItem> album = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7pA5KQnWxXWSHJv8g1wWQK", "album12", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista1", null),
                new GeneralItem("4sTehljxd3DNsjHWx3a64L", "album22", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista2", null),
                new GeneralItem("5uu6yCShtYnAp4qvrmQs72", "album32", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista3", null)
        ));
        List<GeneralItem> recommendedAlbum = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("51PpTmf21xMgbjdcirTTDa", "album12", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista1", null),
                new GeneralItem("4sTehljxd3DNsjHWx3a64L", "album22", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista2", null),
                new GeneralItem("5uu6yCShtYnAp4qvrmQs72", "album32", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artista3", null)
        ));
        albumService.getUserSavedAlbums(this::updateAlbumByAPI, "ES", 10, 0);
        adapter = new AdapterLibraryList(album, getContext());
        listAlbum.setAdapter(adapter);
        listAlbum.setLayoutManager(new LinearLayoutManager(getContext()));
        SongService songService = new SongService(getContext());
        songService.getRecentlyPlayedTracks(() -> {
            List<Song> songs = songService.getSongs();
            List<Album> albums = new ArrayList<>();
            for (Song s : songs) {
                //    if ()
                albums.add(s.getAlbum());


            }
        });
        adapterAdd = new AdapterLibraryListAdd2(recommendedAlbum, getContext());
        listRecommended.setAdapter(adapterAdd);
        listRecommended.setLayoutManager(new LinearLayoutManager(getContext()));

        return v;
    }

    private void updateAlbumByAPI() {
        List<Album> savedAlbums = albumService.getUserSavedAlbums();
        List<GeneralItem> g = new ArrayList<>();
        for (Album a : savedAlbums) {
            System.out.println("pre boom" + a.toString());
            g.add(a.toGeneralItem());
        }
        adapter.setItems(g);
    }
}/* 
File: .\java\com\example\meowtify\fragments\ArtistFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.adapters.AdapterMainList;
import com.example.meowtify.adapters.AdapterSongsList;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.Followers;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.ArtistService;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;


public class ArtistFragment extends Fragment {
    String songListsIds = "";

    boolean isFollowing = false;
    ImageView imageArtist;
    TextView nameArtist, subtitleArtist;
    Button buttonShuffel, buttonFolllow;
    RecyclerView songs, albums, relatedArtist;
    Artist artist;
    AdapterSongsList adapterSongs;
    AdapterSongsList adapterAlbum;
    AdapterMainList adapterArtist;
    ArtistService artistService;

    public ArtistFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_artist, container, false);

        imageArtist = v.findViewById(R.id.image_artist2);
        nameArtist = v.findViewById(R.id.name_artist2);
        subtitleArtist = v.findViewById(R.id.subname_artist2);
        buttonShuffel = v.findViewById(R.id.shuffel_artist);
        buttonFolllow = v.findViewById(R.id.follow_artist);
        songs = v.findViewById(R.id.songs);
        albums = v.findViewById(R.id.albums);
        relatedArtist = v.findViewById(R.id.related);
        artistService = new ArtistService(v.getContext());
        artist = new Artist(new Followers(), null, 10, null, "FalkKonE", null, "7vlM4bn4gPubcmntK8UBp0", Type.artist, null, null);
        Picasso.with(v.getContext()).load("http://i.imgur.com/DvpvklR.png").into(imageArtist);
        Bundle b = getArguments();
        if (b != null) {
            GeneralItem generalItem = (GeneralItem) b.getSerializable("generalItem");
            artistService.getArtistByid(generalItem.getId(), this::updateArtistByAPI);
            artistService.checkIfTheUserFollowsAArtist(this::updateFollowButtonByAPI, generalItem.getId());
            artistService.getRelatedArtists(this::updateRelatedArtistsByAPI, generalItem.getId());
            artistService.getArtistAlbums(this::updateArtistAlbumsByAPI, generalItem.getId(), "ES", 30, 0);
            artistService.getTopSongsOfAnArtist(this::updateArtistTopTracksByAPI, generalItem.getId(), "ES");
        }

        nameArtist.setText(artist.getName());
        String subtitle = artist.getFollowers().getTotal() + " FOLLOWERS";
        subtitleArtist.setText(subtitle);

        buttonShuffel.setOnClickListener(view -> {
            GeneralItem generalItem = artist.toGeneralItem();

            generalItem.setId(artist.getId());
            generalItem.setType(Type.track);
            generalItem.setExtra1(String.valueOf(new Random().nextInt(adapterSongs.getItemCount())));
            generalItem.setExtra2(Type.artist.toString());

            Utilitis.navigationToAAP(generalItem, getContext());
        });
        buttonFolllow.setOnClickListener(view -> {
            //todo: add to the follow playlist
            String text = buttonFolllow.getText().toString();
            System.out.println(text);
            if (!isFollowing) {

                artistService.followAnArtist(artist);
                text = "unfollow";
                isFollowing = true;
            } else if (isFollowing) {
                artistService.unfollowAArtist(artist);
                text = "follow";
                isFollowing = false;
            }
            buttonFolllow.setText(text);
        });

        List<GeneralItem> songsList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "40/100", null)
        ));
        if (songsList.size() > 10) songsList = songsList.subList(0, 10);

        adapterSongs = new AdapterSongsList(songsList, getContext(), 130, Type.artist, songListsIds);
        songs.setAdapter(adapterSongs);
        songs.setLayoutManager(new LinearLayoutManager(getContext()));

        List<GeneralItem> albumsList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "2020", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "2019", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "2017", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "2016", null)
        ));

        adapterAlbum = new AdapterSongsList(albumsList, getContext(), 200, null, songListsIds);
        albums.setAdapter(adapterAlbum);
        albums.setLayoutManager(new LinearLayoutManager(getContext()));

        List<GeneralItem> artistList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null)
        ));

        adapterArtist = new AdapterMainList(artistList, getContext(), 250);
        relatedArtist.setAdapter(adapterArtist);
        relatedArtist.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));

        return v;
    }

    private void updateFollowButtonByAPI() {
        isFollowing = artistService.isLastCheck();
        System.out.println("The user is following the current artist " + isFollowing);
        String text = buttonFolllow.getText().toString();
        System.out.println(text);
        if (!isFollowing) {
            text = "follow";
        } else if (isFollowing) {
            text = "unfollow";
        }
        buttonFolllow.setText(text);
    }

    private void updateArtistTopTracksByAPI() {
        List<Song> a = artistService.getTopSongsLastArtist();
        List<GeneralItem> generalItemList = new ArrayList<>();

        for (Song s : a) {
            generalItemList.add(s.toGeneralItemArtist());
            songListsIds += s.getId() + " ";

        }
        adapterSongs.setItems(generalItemList);
        adapterSongs.setIdList(songListsIds);
    }

    private void updateArtistAlbumsByAPI() {
        List<Album> a = artistService.getAlbumsLastArtist();
        List<GeneralItem> generalItemList = new ArrayList<>();

        for (Album album : a) {
            generalItemList.add(album.toGeneralItemArtist());
        }
        adapterAlbum.setItems(generalItemList);
    }

    private void updateRelatedArtistsByAPI() {
        List<Artist> a = artistService.getRelatedArtist();
        List<GeneralItem> generalItemList = new ArrayList<>();
        for (Artist art : a) {
            generalItemList.add(art.toGeneralItem());
        }
        adapterArtist.setItems(generalItemList);
    }


    private void updateArtistByAPI() {
        Artist a = artistService.getLastSearchedArtist();
        artist = a;
        Picasso.with(getContext()).load(a.images.get(0).url).into(imageArtist);
        nameArtist.setText(a.getName());
        subtitleArtist.setText(a.getFollowers().getTotal() + " FOLLOWERS");


    }
}/* 
File: .\java\com\example\meowtify\fragments\ArtistLibraryFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.adapters.AdapterLibraryList;
import com.example.meowtify.adapters.AdapterLibraryListAdd1;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.ArtistService;
import com.example.meowtify.services.SongService;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class ArtistLibraryFragment extends Fragment {

    AdapterLibraryListAdd1 adapterRecommended;

    RecyclerView listArtist, listRecommended;
    ArtistService artistService;
    AdapterLibraryList adapter;
    List<Artist> followedArtists;
    List<String> followedArtistsIds = new ArrayList<>();

    public ArtistLibraryFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_artist_library, container, false);
        artistService = new ArtistService(v.getContext());
        SongService songService = new SongService(v.getContext());

        artistService.getUserFollowedArtists(this::updateFollowedArtistsByAPI, 30);
        songService.getRecentlyPlayedTracks(() -> {
            List<Song> songs = songService.getSongs();
            Random random = new Random();
            if (songs.size() != 0)
                artistService.getRelatedArtists(this::updateRecommendedArtistsByAPI, songs.get((random.nextInt(songs.size()))).getArtists().get(0).getId());
        });
        listArtist = v.findViewById(R.id.artistas_library);
        listRecommended = v.findViewById(R.id.recommended_library);

        List<GeneralItem> artist = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "artist12", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 1", null),
                new GeneralItem("06F1MiFx0dHLHEPQBIrcr9", "artist22", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 2", null),
                new GeneralItem("0blbVefuxOGltDBa00dspv", "artist32", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 3", null)
        ));
        List<GeneralItem> recommendedArtist = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("5t7eQ2d1UmzfIr9oWQ538Y", "artist12", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 1", null),
                new GeneralItem("06F1MiFx0dHLHEPQBIrcr9", "artist22", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 2", null),
                new GeneralItem("0blbVefuxOGltDBa00dspv", "artist32", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "followers 3", null)
        ));

        adapter = new AdapterLibraryList(artist, getContext());
        listArtist.setAdapter(adapter);
        listArtist.setLayoutManager(new LinearLayoutManager(getContext()));

        adapterRecommended = new AdapterLibraryListAdd1(recommendedArtist, getContext());
        listRecommended.setAdapter(adapterRecommended);
        listRecommended.setLayoutManager(new LinearLayoutManager(getContext()));

        return v;
    }

    private void updateFollowedArtistsByAPI() {
        followedArtists = artistService.getUserFollowedArtists();
        List<GeneralItem> generalItemList = new ArrayList<>();
        for (Artist artist : followedArtists) {
            generalItemList.add(artist.toGeneralItem());
            followedArtistsIds.add(artist.getId());
        }
        adapter.setItems(generalItemList);

    }

    private void updateRecommendedArtistsByAPI() {
        List<Artist> a = artistService.getRelatedArtist();
        List<GeneralItem> generalItemList = new ArrayList<>();
        for (Artist artist : a) {
            System.out.println("contiene artist f" + followedArtistsIds.contains(artist.getId()));
            if (!followedArtistsIds.contains(artist.getId()))
                generalItemList.add(artist.toGeneralItem());
        }
        adapterRecommended.setItems(generalItemList);

    }
}/* 
File: .\java\com\example\meowtify\fragments\CreatePlaylistFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;

import androidx.fragment.app.Fragment;

import com.example.meowtify.R;
import com.example.meowtify.services.PlaylistService;

import java.util.Objects;


public class CreatePlaylistFragment extends Fragment {


    EditText newName;
    Button cancel, create;
    int playlistCount;

    public CreatePlaylistFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_create_playlist, container, false);

        newName = v.findViewById(R.id.new_name);
        cancel = v.findViewById(R.id.cancel_button);
        create = v.findViewById(R.id.create_button);

        Bundle b = getArguments();
        if (b != null) {
            playlistCount = b.getInt("coutList");
        }

        newName.setOnEditorActionListener((textView, i, keyEvent) -> false);

        newName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                if (charSequence != null) create.setText("CREATE");
                else create.setText("SKIP");
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });

        cancel.setOnClickListener(view -> Objects.requireNonNull(getActivity()).getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new YourLibraryFragment()).commit());
        create.setOnClickListener(view -> {
            String name;
            if (newName.getText() == null) name = "My playlist #" + playlistCount;
            else name = newName.getText().toString();

            PlaylistService playlistService = new PlaylistService(getContext());
            playlistService.createAPlaylist(name, "Created with Meowfy", true);
            Objects.requireNonNull(getActivity()).getSupportFragmentManager().beginTransaction().replace(R.id.fragment_container, new YourLibraryFragment()).commit();
        });

        return v;
    }
}/* 
File: .\java\com\example\meowtify\fragments\MainFragment.java     
/* 
package com.example.meowtify.fragments;

import android.content.SharedPreferences;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.adapters.AdapterMainList;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.example.meowtify.services.PlaylistService;
import com.example.meowtify.services.SongService;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class MainFragment extends Fragment {
    final List<GeneralItem> defaultItem = new ArrayList<GeneralItem>(Arrays.asList(

            new GeneralItem("5tXPbKvuDsSgctH5Mlpn18", "Item11", null, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "Item12", null),
            new GeneralItem("7xsdr3YuARtJxqssk1m3Kq", "Item21", null, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "Item22", null),
            new GeneralItem("3ForlWAUJFtzxezcS47JmB", "Item31", null, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "Item32", null),
            new GeneralItem("6dJMlk3nncKD4y0wzuyhWr", "Item41", null, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "Item42", null)
    ));
    public List<AdapterMainList> adapters = new ArrayList<>(6);
    private SongService songService;
    private PlaylistService playlistService;
    private TextView missatgePersonalitzat;
    private RecyclerView list1, list2, list3, list4, list5;

    public MainFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_main, container, false);
        adapters = new ArrayList<>();

        playlistService = new PlaylistService(v.getContext());
        adapters.add(new AdapterMainList(defaultItem, v.getContext(), 400));
        adapters.add(new AdapterMainList(defaultItem, v.getContext(), 400));
        adapters.add(new AdapterMainList(defaultItem, v.getContext(), 400));
        adapters.add(new AdapterMainList(defaultItem, v.getContext(), 400));
        adapters.add(new AdapterMainList(defaultItem, v.getContext(), 400));
        missatgePersonalitzat = v.findViewById(R.id.missatgePersonalitzat);
        list1 = v.findViewById(R.id.listRecently);
        list2 = v.findViewById(R.id.listYourPlaylist);
        list3 = v.findViewById(R.id.listJumpBack);
        list4 = v.findViewById(R.id.listJumpBack2);
        list5 = v.findViewById(R.id.listRecommendedByDeveloper);
        int date = Integer.parseInt(new SimpleDateFormat("H", Locale.UK).format(new Date().getTime()));
        System.out.println(date);
        String s;
        if (8 > date) {
            s = "Too early";
        } else if (12 > date) {
            s = "Good morning";
        } else if (15 > date) {
            s = "Good noon";
        } else if (21 > date) {
            s = "Good afternoon";
        } else {
            s = "Good evening";
        }
        SharedPreferences sharedPreferences = this.getActivity().getSharedPreferences("SPOTIFY", 0);

        missatgePersonalitzat.setText(s + " " + sharedPreferences.getString("username", "Unknown user"));

        songService = new SongService(v.getContext());
        list1.setAdapter(adapters.get(0));
        list1.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        list2.setAdapter(adapters.get(1));
        list2.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        list3.setAdapter(adapters.get(2));
        list3.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        list4.setAdapter(adapters.get(3));
        list4.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        list5.setAdapter(adapters.get(4));
        list5.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));

        songService.getRecentlyPlayedTracks(this::IntroduceRecentlyPlayedSongs);
        playlistService.getFeaturedPlayList(this::IntroduceFeaturedPlaylists);
        playlistService.getUserPlayLists(this::IntroduceMyPlaylists, 50, 0);
        playlistService.getNewReleases(this::IntroduceNewReleases, "JP", 10, 0);
        playlistService.getAPlayListByRef(this::IntroduceDevelopersPlaylist, "5tXPbKvuDsSgctH5Mlpn18");
        playlistService.getAPlayListByRef(this::IntroduceDevelopersPlaylist, "7xsdr3YuARtJxqssk1m3Kq");
        playlistService.getAPlayListByRef(this::IntroduceDevelopersPlaylist, "3ForlWAUJFtzxezcS47JmB");
        playlistService.getAPlayListByRef(this::IntroduceDevelopersPlaylist, "6dJMlk3nncKD4y0wzuyhWr");

        return v;
    }

    private void IntroduceRecentlyPlayedSongs() {
        List<Song> itemsSongs = songService.getSongs();
        List<GeneralItem> items21 = new ArrayList<>();
        System.out.println("Songs" + songService.getSongs().toString());
        for (Song p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in param : = " + items21.toString());
        adapters.get(0).setItems(items21);
    }

    private void IntroduceMyPlaylists() {
        List<Playlist> itemsSongs = playlistService.getPlaylists();
        List<GeneralItem> items21 = new ArrayList<>();
        for (Playlist p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in param : = " + items21.toString());
        adapters.get(1).setItems(items21);
        System.out.println("The list " + adapters.get(1).toString());
    }

    private void IntroduceDevelopersPlaylist() {
        List<Playlist> itemsSongs = playlistService.getDevelopersPlaylist();
        List<GeneralItem> items21 = new ArrayList<>();
        for (Playlist p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in dev : = " + items21.toString());
        adapters.get(4).setItems(items21);
        System.out.println("The  dev list " + adapters.get(4).toString());
    }

    private void IntroduceFeaturedPlaylists() {
        List<Playlist> itemsSongs = playlistService.getFeaturedPlaylistsPlaylists();
        List<GeneralItem> items21 = new ArrayList<>();
        for (Playlist p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in param : = " + items21.toString());
        adapters.get(2).setItems(items21);
        System.out.println("The list " + adapters.get(2).toString());
    }

    private void IntroduceNewReleases() {
        List<Album> itemsSongs = playlistService.getNewReleases();
        List<GeneralItem> items21 = new ArrayList<>();
        for (Album p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in param for new releases : = " + items21.toString());
        adapters.get(3).setItems(items21);
        System.out.println("The list " + adapters.get(3).toString());
    }

}/* 
File: .\java\com\example\meowtify\fragments\OnFragmentChanged.java     
/* 
package com.example.meowtify.fragments;

public interface OnFragmentChanged {
    void OnFragmentChanged();
}
/* 
File: .\java\com\example\meowtify\fragments\PlaylistFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.Utilities;
import com.example.meowtify.activities.MainActivity;
import com.example.meowtify.adapters.AdapterSongsList;
import com.example.meowtify.models.Followers;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.example.meowtify.models.User;
import com.example.meowtify.services.PlaylistService;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class PlaylistFragment extends Fragment {


    ImageView imagePlaylist;
    TextView namePlaylist, subtitlePlaylist;
    Button buttonShuffel, buttonFolllow;
    RecyclerView songs;
    Playlist playlist;
    AdapterSongsList adapterSongs;
    PlaylistService playlistService;


    public PlaylistFragment() {
        // Required empty public constructor

    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_playlist, container, false);

        playlistService = new PlaylistService(v.getContext());
        imagePlaylist = v.findViewById(R.id.image_playlist);
        namePlaylist = v.findViewById(R.id.name_playlist);
        subtitlePlaylist = v.findViewById(R.id.subname_playlist);
        buttonShuffel = v.findViewById(R.id.shuffle_playlist);
        buttonFolllow = v.findViewById(R.id.follow_playlist);
        songs = v.findViewById(R.id.songs);
        playlist = new Playlist(false, new Followers(), null, null, null, null, null, new User("default"), true, null, null, null);
        Picasso.with(v.getContext()).load("http://i.imgur.com/DvpvklR.png").into(imagePlaylist);
        Bundle b = getArguments();
        if (b != null) {
            GeneralItem generalItem = (GeneralItem) b.getSerializable("generalItem");
            playlist.setId(generalItem.getId());
            playlistService.getAPlayListByRef(this::updatePlaylistByAPI, generalItem.getId());
        }

        namePlaylist.setText(playlist.getName());
        String subtitle = "BY " + playlist.getOwner().getDisplayName() + " · " + playlist.getFollowers().getTotal() + " FOLLOWERS";
        subtitlePlaylist.setText(subtitle);

        buttonShuffel.setOnClickListener(view -> {
            GeneralItem generalItem = playlist.toGeneralItem();

            generalItem.setId(playlist.getId());
            generalItem.setType(Type.track);
            generalItem.setExtra1(String.valueOf(new Random().nextInt(adapterSongs.getItemCount())));
            generalItem.setExtra2(Type.playlist.toString());

            Utilitis.navigationToAAP(generalItem, getContext());
        });
        buttonFolllow.setOnClickListener(view -> {
            PlaylistService playlistService = new PlaylistService(v.getContext());
            System.out.println("ID to follow" + " = " + playlist.getId());
            String text = buttonFolllow.getText().toString();
            System.out.println(text);
            if (text.equals("follow")) {
                playlistService.followAPlaylist(playlist);
                text = "unfollow";
            } else if (text.equals("unfollow")) {
                text = "follow";
                playlistService.unfollowAPlaylist(playlist);

            }
            buttonFolllow.setText(text);
        });

        List<GeneralItem> songsList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("7vlM4bn4gPubcmntK8UBp0", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist11", null),
                new GeneralItem("6Ynd3UhOWONEzAC2PtWGXw", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist12", null),
                new GeneralItem("0CeV1QZH5267PmzIpqRZmS", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist13", null),
                new GeneralItem("1wuW57ULEfM9pgCYIhROMs", "Beliver", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist14", null)
        ));

        adapterSongs = new AdapterSongsList(songsList, getContext(), 130, Type.playlist, playlist.getId());
        songs.setAdapter(adapterSongs);
        songs.setLayoutManager(new LinearLayoutManager(getContext()));

        return v;
    }

    public void updatePlaylistByAPI() {
        List<Playlist> playlists = playlistService.getDevelopersPlaylist();
        final boolean[] bool = new boolean[1];
        playlistService.checkIfTheUserFollowsAPlaylist(() -> {
            bool[0] = playlistService.isLastCheck();
            System.out.println("the callback bool is" + bool);
            Toast.makeText(getView().getContext(), "\"the callback bool is\" + bool", Toast.LENGTH_SHORT).show();
            if (bool[0]) {
                buttonFolllow.setText("unfollow");
            } else buttonFolllow.setText("follow");
            List<GeneralItem> generalItemList = new ArrayList<>();
            for (Song s : playlists.get(0).getSongs()) {
                generalItemList.add(s.toGeneralItem());
            }
            playlist = playlists.get(0);
            namePlaylist.setText(playlist.getName());
            if (playlist.getImages().length != 0)
                Picasso.with(getView().getContext()).load(playlist.getImages()[0].url).into(imagePlaylist);
            else
                Picasso.with(getView().getContext()).load("https://depor.com/resizer/y0QpdzhnMuUBnXCguq_9y_MOiFs=/1200x675/smart/filters:format(jpeg):quality(75)/cloudfront-us-east-1.images.arcpublishing.com/elcomercio/RGKQY6IKM5GQ3N55KHVWVKSQI4.png").into(imagePlaylist);
            String subtitle = "BY " + playlist.getOwner().getDisplayName() + " · " + playlist.getFollowers().getTotal() + " FOLLOWERS";
            subtitlePlaylist.setText(subtitle);
            adapterSongs.setItems(generalItemList);
        }, playlists.get(0).getId());
        MainActivity.inPlayerForFirstTime = true;
    }
}
/* 
File: .\java\com\example\meowtify\fragments\PlaylistLibraryFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.adapters.AdapterLibraryList;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.PlaylistService;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class PlaylistLibraryFragment extends Fragment {


    RecyclerView listPlaylist;
    PlaylistService playlistService;
    AdapterLibraryList adapter;

    public PlaylistLibraryFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_playlist_library, container, false);

        listPlaylist = v.findViewById(R.id.list_library);
        playlistService = new PlaylistService(v.getContext());
        playlistService.getUserPlayLists(this::IntroduceMyPlaylists, 50, 0);

        List<GeneralItem> items = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("5tXPbKvuDsSgctH5Mlpn18", "Create playlist", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null),
                new GeneralItem("7xsdr3YuARtJxqssk1m3Kq", "Item12", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "creator12", null),
                new GeneralItem("3ForlWAUJFtzxezcS47JmB", "Item22", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "creator12", null),
                new GeneralItem("6dJMlk3nncKD4y0wzuyhWr", "Item32", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "creator12", null)
        ));

        adapter = new AdapterLibraryList(items, getContext());
        listPlaylist.setAdapter(adapter);
        listPlaylist.setLayoutManager(new LinearLayoutManager(getContext()));

        return v;
    }

    private void IntroduceMyPlaylists() {
        List<Playlist> itemsSongs = playlistService.getPlaylists();
        List<GeneralItem> items21 = new ArrayList<>();
        items21.add(new GeneralItem("id", "Create playlist", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", null, null));
        for (Playlist p : itemsSongs
        ) {
            items21.add(p.toGeneralItem());
        }
        System.out.println("Items in param : = " + items21.toString());
        adapter.setItems(items21);
        System.out.println("The list " + adapter.toString());
    }
}/* 
File: .\java\com\example\meowtify\fragments\PlayerFragment.java
/* 
package com.example.meowtify.fragments;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.media.MediaPlayer;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import androidx.fragment.app.Fragment;

import com.example.meowtify.R;
import com.example.meowtify.activities.MainActivity;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.AlbumService;
import com.example.meowtify.services.ArtistService;
import com.example.meowtify.services.MediaPlayerService;
import com.example.meowtify.services.PlaylistService;
import com.example.meowtify.services.SongService;
import com.example.meowtify.services.notifications.CreateNotification;
import com.example.meowtify.services.notifications.OnClearFromRecentService;
import com.example.meowtify.services.notifications.Playable;
import com.squareup.picasso.Picasso;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import static android.content.Context.BIND_AUTO_CREATE;


public class PlayerFragment extends Fragment implements Playable, MediaPlayer.OnCompletionListener {
    public static SongService songService;
    public static GeneralItem song;
    public static Type type;
    public static String idList;
    ImageButton playButton;
    ImageButton forwardButton;
    ImageButton backwardButton;
    ImageButton favoriteButton;
    ImageButton shuffelButton;
    ImageButton repeatButton;
    ImageView songImage;
    TextView titleSong;
    TextView subtitleSong;
    TextView currentDuration;
    SeekBar seekBar;
    AlbumService albumService;
    PlaylistService playlistService;
    boolean isPlaying = false;
    MainActivity mainActivity;
    View v;

    public PlayerFragment() {
        // Required empty public constructor
    }

    @Override
    public void onStart() {
        super.onStart();

        Intent mIntent = new Intent(getContext(), MediaPlayerService.class);
        getActivity().bindService(mIntent, mainActivity.mConnection, BIND_AUTO_CREATE);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_reproductor, container, false);
        songService = new SongService(v.getContext());
        mainActivity = (MainActivity) getActivity();
        Bundle b = getArguments();
        if (b != null) {
            type = (Type) b.getSerializable("typeList");

            if (type != Type.track) {
                idList = b.getString("idList");
                mainActivity.position = b.getInt("posList");
            }
            switch (type) {
                case album:
                    albumService = new AlbumService(v.getContext());
                    albumService.getAlbumByRef(() -> {
                        if (albumService.getLastAlbum() != null)
                            mainActivity.songs = albumService.getLastAlbum().getSongs();
                        for (int i = 0; i < mainActivity.songs.size(); i++) {
                            mainActivity.songs.get(i).setAlbum(albumService.getLastAlbum());
                        }
                        updateSongByAPI();

                    },((GeneralItem)b.getSerializable("generalItem")).getId());
                    break;
                case track:
                    songService = new SongService(v.getContext());
                    songService.getASongByRef(() -> {
                        albumService = new AlbumService(v.getContext());
                        albumService.getAlbumByRef(() -> {
                            if (albumService.getLastAlbum() != null)
                                mainActivity.songs = albumService.getLastAlbum().getSongs();
                            for (int i = 0; i < mainActivity.songs.size(); i++) {
                                mainActivity.songs.get(i).setAlbum(albumService.getLastAlbum());
                            }
                            updateSongByAPI();

                        },songService.lastSearchedSong.getAlbum().getId());
                    },((GeneralItem)b.getSerializable("generalItem")).getId());
                    break;

                case artist:
                    String[] idsSongs = idList.split(" ");
                    for (int i = 0; i < idsSongs.length; i++) {
                        if (!idsSongs[i].contains(" ") && !idsSongs[i].isEmpty()) {
                            int finalI = i;
                            songService.getASongByRef(()->{
                                Song songTemp = songService.lastSearchedSong;
                                mainActivity.songs.add(songTemp);
                                if (finalI ==idsSongs.length-1){
                                  ChangeSong(mainActivity.songs.get(mainActivity.position));
                                }

                            },idsSongs[i]);
                    }


                        System.out.println("Generated songs ids" + mainActivity.songs.toString());

                    }
                    break;
                case playlist:
                    playlistService = new PlaylistService(v.getContext());
                    playlistService.getAPlayListByRef(() -> {
                        mainActivity.songs = playlistService.getLastSearchedPlaylist().getSongs();
                        System.out.println("songs is"
                                + mainActivity.songs.toString());
                        ChangeSong(mainActivity.songs.get(mainActivity.position));
                    },idList);
                    break;
            }
        }
        playButton = v.findViewById(R.id.playButton);
        seekBar = v.findViewById(R.id.seekBar);
        forwardButton = v.findViewById(R.id.nextButton);
        backwardButton = v.findViewById(R.id.prevButton);
        shuffelButton = v.findViewById(R.id.shuffleButton);
        repeatButton = v.findViewById(R.id.repeatButton);
        songImage = v.findViewById(R.id.currentSongImage);
        titleSong = v.findViewById(R.id.title);
        subtitleSong = v.findViewById(R.id.subtitle);
        currentDuration = v.findViewById(R.id.currentDuration);
        favoriteButton = v.findViewById(R.id.favButton);
        mainActivity.mediaPlayerServiceIntent = new Intent(getContext(), MediaPlayerService.class);


        playButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isPlaying) {
                    onTrackPause();
                } else onTrackPlay();
            }
        });
        backwardButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onTrackPrevious();
            }
        });
        forwardButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                onTrackNext();
            }
        });

        shuffelButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Collections.shuffle(mainActivity.songs);
            }
        });
        repeatButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mainActivity.songs.add(mainActivity.position+1, mainActivity.songs.get(mainActivity.position));
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {

                if (mainActivity.mBounded && mainActivity.songs != null && fromUser) {
                    System.out.println("Current progress" + progress + "of " + mainActivity.mediaPlayerService.getCurrentPositionInMillisecons());
                    mainActivity.mediaPlayerService.changeProgress(progress);

                    onTrackPlay();
                }

                currentDuration.setText(String.format("%02d:%02d", TimeUnit.MILLISECONDS.toMinutes(progress),
                        TimeUnit.MILLISECONDS.toSeconds(progress) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(progress))));
            }
        });

        favoriteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (favoriteButton.getTag(R.string.albunes).equals("1")) {
                    songService.addSongToLibrary(mainActivity.songs.get(mainActivity.position));
                    favoriteButton.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_24));
                    favoriteButton.setTag(R.string.albunes, "0");
                } else {
                    songService.removeSongOfLibrary(mainActivity.songs.get(mainActivity.position));
                    favoriteButton.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_border_24));
                    favoriteButton.setTag(R.string.albunes, "1");

                 }
            }
        });

        this.v = v;
        return v;
    }

    public void updateSongByAPI() {
        v.getContext().startService(mainActivity.mediaPlayerServiceIntent);
        v.getContext().bindService(mainActivity.mediaPlayerServiceIntent, mainActivity.mConnection, BIND_AUTO_CREATE);

        Song s = mainActivity.songs.get(mainActivity.position);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            v.getContext().startService(new Intent(getContext(), OnClearFromRecentService.class));
        }
        if (mainActivity.mBounded)
            seekBar.setMax(30000);
        MainActivity.inPlayerForFirstTime = true;

        titleSong.setText(s.getName());
        titleSong.setSelected(true);
        if (s.getAlbum() != null) {
            subtitleSong.setText(s.getAlbum().getArtistNames());
            subtitleSong.setText(s.getAlbum().getArtistNames());
            Picasso.with(getContext()).load(s.getAlbum().getImages().get(0).url).into(songImage);
            if (mainActivity.mBounded)
                mainActivity.mediaPlayerService.changeSong(s);
            onTrackPlay();
        } else {
            System.out.println("S es " + s.toString());


        }

songService.checkIfTheUserHasASongInFavorites(()->{
    if(songService.isLastCheck()) {
        favoriteButton.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_24));
        favoriteButton.setTag(R.string.albunes, "0");
    }else {
        favoriteButton.setImageDrawable(getContext().getDrawable(R.drawable.ic_baseline_favorite_border_24));
        favoriteButton.setTag(R.string.albunes,"1");
    }
},mainActivity.songs.get(mainActivity.position).getId());


    }

    public void startSeekBar() {
        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);

        service.scheduleWithFixedDelay(new Runnable() {
            @Override
            public void run() {

                seekBar.setProgress(mainActivity.mediaPlayerService.getCurrentPositionInMillisecons());
                if (mainActivity.mediaPlayerService.getCurrentPositionInMillisecons() == 30000) {
                    onTrackEnd();
                }


            }
        }, 1, 1, TimeUnit.MILLISECONDS);

    }

    @Override
    public void onStop() {
        super.onStop();
    }

    public void ChangeSong(Song s) {
        songService.getASongByRef(this::updateSongByAPI, s.getId());
    }

    @Override
    public void onTrackPrevious() {
        if (mainActivity.position - 1 > 0) {
            mainActivity.position--;
            ChangeSong(mainActivity.songs.get(mainActivity.position));
            CreateNotification.createNotification(getContext(), mainActivity.songs.get(mainActivity.position), android.R.drawable.ic_media_pause, mainActivity.position, mainActivity.songs.size() - 1);
        } else {
            Toast.makeText(mainActivity.mediaPlayerService, "No more Songs", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onTrackPlay() {
        CreateNotification.createNotification(getContext(), mainActivity.songs.get(mainActivity.position),
                android.R.drawable.ic_media_pause, mainActivity.position, mainActivity.songs.size() - 1);
        playButton.setImageResource(android.R.drawable.ic_media_pause);
        if (mainActivity.mBounded)
            MediaPlayerService.resume();
        isPlaying = true;
        startSeekBar();
    }

    @Override
    public void onTrackPause() {
        CreateNotification.createNotification(getContext(), mainActivity.songs.get(mainActivity.position),
                android.R.drawable.ic_media_play, mainActivity.position, mainActivity.songs.size() - 1);
        if (mainActivity.mBounded)
            mainActivity.mediaPlayerService.pause();
        playButton.setImageResource(android.R.drawable.ic_media_play);
        isPlaying = false;
    }

    @Override
    public void onTrackNext() {
        if (mainActivity.position + 1 < mainActivity.songs.size()) {
            mainActivity.position++;
            CreateNotification.createNotification(getContext(), mainActivity.songs.get(mainActivity.position),
                    android.R.drawable.ic_media_pause, mainActivity.position, mainActivity.songs.size() - 1);

            ChangeSong(mainActivity.songs.get(mainActivity.position));

        } else {
            Toast.makeText(mainActivity.mediaPlayerService, "No more Songs", Toast.LENGTH_SHORT).show();
        }
    }

    @Override
    public void onTrackEnd() {
        onTrackNext();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    @Override
    public void onCompletion(MediaPlayer mp) {
        onTrackNext();
    }


}/* 
File: .\java\com\example\meowtify\fragments\SearchFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Build;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import androidx.core.graphics.drawable.DrawableCompat;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.meowtify.R;
import com.example.meowtify.adapters.AdapterSearchList;
import com.example.meowtify.adapters.AdapterSearchRecentlyList;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Type;
import com.example.meowtify.services.PlaylistService;
import com.google.android.material.textfield.TextInputLayout;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class SearchFragment extends Fragment {


    public static boolean searched = false;
    public static List<GeneralItem> recentlySearchList = new ArrayList<>();
    public AdapterSearchRecentlyList adapterRecently;
    AdapterSearchList adapterSearch;
    PlaylistService playlistService;
    private RecyclerView search, recentlySearch;
    private TextInputLayout searchLayout;
    private TextView recentlyText;

    public SearchFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_search, container, false);

        searchLayout = v.findViewById(R.id.search_edit);
        search = v.findViewById(R.id.list_search);
        recentlySearch = v.findViewById(R.id.list_recenly_search);
        recentlyText = v.findViewById(R.id.textRecycler);

        search.setVisibility(View.INVISIBLE);

        List<GeneralItem> searchList = new ArrayList<GeneralItem>(Arrays.asList(
                new GeneralItem("id1", "playlist", Type.playlist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "creator12", null),
                new GeneralItem("id2", "artist", Type.artist, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "songs " + 1, null),
                new GeneralItem("id3", "album", Type.album, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist11", null),
                new GeneralItem("id4", "track", Type.track, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", "artist12", null)
        ));


        adapterSearch = new AdapterSearchList(searchList, getContext(), this);
        search.setAdapter(adapterSearch);
        search.setLayoutManager(new LinearLayoutManager(getContext()));

        adapterRecently = new AdapterSearchRecentlyList(recentlySearchList, getContext());
        recentlySearch.setAdapter(adapterRecently);
        recentlySearch.setLayoutManager(new LinearLayoutManager(getContext()));

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            DrawableCompat.setTint(searchLayout.getEndIconDrawable(), v.getContext().getColor(R.color.white));
        }

        searchLayout.getEditText().addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                recentlySearch.setVisibility(View.INVISIBLE);
                recentlyText.setVisibility(View.INVISIBLE);
                search.setVisibility(View.VISIBLE);
                playlistService = new PlaylistService(v.getContext());
                playlistService.search(this::updateSearchByAPI, charSequence.toString(), new ArrayList<Type>(Arrays.asList(Type.artist, Type.album, Type.playlist, Type.track)), "ES", 40, 0);
            }

            public void updateSearchByAPI() {
                adapterSearch.setItems(playlistService.getSearchResults());
                searched = true;
            }


            @Override
            public void afterTextChanged(Editable editable) {

            }
        });

        searchLayout.setEndIconOnClickListener(view -> {
            searchLayout.getEditText().setText("");

            search.setVisibility(View.INVISIBLE);
            recentlySearch.setVisibility(View.VISIBLE);
            recentlyText.setVisibility(View.VISIBLE);
        });

        return v;
    }

    public boolean checkRecentlySearch(GeneralItem generalItem) {
        for (GeneralItem gI : recentlySearchList) {
            System.out.println(gI.getId().equals(generalItem.getId()));
            if (gI.getId().equals(generalItem.getId())) return true;
        }

        return false;
    }
}
/* 
File: .\java\com\example\meowtify\fragments\YourLibraryFragment.java     
/* 
package com.example.meowtify.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.fragment.app.Fragment;
import androidx.viewpager.widget.ViewPager;

import com.example.meowtify.R;
import com.example.meowtify.adapters.LibraryPagerAdapter;


public class YourLibraryFragment extends Fragment {


    public YourLibraryFragment() {
    }


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_your_library, container, false);

        ViewPager viewPager = (ViewPager) v.findViewById(R.id.viewpager);
        LibraryPagerAdapter adapter = new LibraryPagerAdapter(getFragmentManager());
        viewPager.setAdapter(adapter);

        return v;
    }
}/* 
File: .\java\com\example\meowtify\models\Album.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;

public class Album {

    List<Song> songs = new ArrayList<>();
    @SerializedName("total_tracks")
    private int totalTracks;
    @SerializedName("images")
    private List<Image> images;
    @SerializedName("artists")
    private List<ArtistsItem> artists;
    @SerializedName("release_date")
    private String releaseDate;
    @SerializedName("name")
    private String name;
    @SerializedName("album_type")
    private String albumType;
    @SerializedName("release_date_precision")
    private String releaseDatePrecision;
    @SerializedName("href")
    private String href;
    @SerializedName("id")
    private String id;
    @SerializedName("type")
    private Type type;
    @SerializedName("external_urls")
    private ExternalUrls externalUrls;
    @SerializedName("uri")
    private String uri;

    public String getArtistNames() {
        String artistNames = "";
        for (int i = 0; i < artists.size(); i++) {
            if (i == artists.size() - 1) {
                artistNames += artists.get(i).getName();

            } else {
                artistNames += artists.get(i).getName() + ", ";

            }
        }
        return artistNames;
    }

    public int getTotalTracks() {
        return totalTracks;
    }

    public void setImages(List<Image> images) {
        this.images = images;
    }

    public List<Image> getImages() {
        return images;
    }

    public List<ArtistsItem> getArtists() {
        return artists;
    }

    public String getReleaseDate() {
        return releaseDate;
    }

    public String getName() {
        return name;
    }

    public String getAlbumType() {
        return albumType;
    }

    public String getReleaseDatePrecision() {
        return releaseDatePrecision;
    }

    public String getHref() {
        return href;
    }

    public String getId() {
        return id;
    }

    public Type getType() {
        return type;
    }

    public ExternalUrls getExternalUrls() {
        return externalUrls;
    }

    public List<Song> getSongs() {
        return songs;
    }

    public List<GeneralItem> getSongsConverted() {
        List<GeneralItem> songs = new ArrayList<>();
        for (Song s : this.songs) {
            songs.add(s.toGeneralItem(images.get(0).url, s.name));
        }
        return songs;
    }

    public String getUri() {
        return uri;
    }

    public void addSong(Song s) {
        songs.add(s);
    }

    public GeneralItem toGeneralItem() {
        GeneralItem item = new GeneralItem();
        item.setId(id);
        item.setName(name);
        item.setType(type);
        if (images!=null)
        item.setImage(images.get(0).getUrl());
      else item.setImage("https://static.wikia.nocookie.net/memes-pedia/images/a/ac/Cj2.jpg/revision/latest?cb=20200708183438&path-prefix=es");
        item.setExtra1(artists.get(0).getName());
        return item;
    }

    public GeneralItem toGeneralItemArtist() {
        GeneralItem item = new GeneralItem();
        item.setId(id);
        item.setName(name);
        item.setType(type);
        if (images!=null)
            item.setImage(images.get(0).getUrl());
        else item.setImage("https://static.wikia.nocookie.net/memes-pedia/images/a/ac/Cj2.jpg/revision/latest?cb=20200708183438&path-prefix=es");
        item.setExtra1(releaseDate);
        return item;
    }

    @Override
    public String toString() {
        return "Album{" +
                "songs=" + songs +
                ", totalTracks=" + totalTracks +
                ", images=" + images +
                ", artists=" + artists +
                ", releaseDate='" + releaseDate + '\'' +
                ", name='" + name + '\'' +
                ", albumType='" + albumType + '\'' +
                ", releaseDatePrecision='" + releaseDatePrecision + '\'' +
                ", href='" + href + '\'' +
                ", id='" + id + '\'' +
                ", type=" + type +
                ", externalUrls=" + externalUrls +
                ", uri='" + uri + '\'' +
                '}';
    }
}/* 
File: .\java\com\example\meowtify\models\Artist.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;

public class Artist {
    public Followers followers;
    public List<genre> genres;
     public int popularity;
    public  List<Image> images;


    @SerializedName("name")
    private String name;

    @SerializedName("href")
    private String href;

    @SerializedName("id")
    private String id;

    @SerializedName("type")
    private Type type;

    @SerializedName("external_urls")
    private ExternalUrls externalUrls;

    @SerializedName("uri")
    private String uri;

    public Artist(Followers followers, List<genre> genres, int popularity, List<Image> images, String name, String href, String id, Type type, ExternalUrls externalUrls, String uri) {
        this.followers = followers;
        this.genres = genres;
        this.popularity = popularity;
        this.images = images;
        this.name = name;
        this.href = href;
        this.id = id;
        this.type = type;
        this.externalUrls = externalUrls;
        this.uri = uri;
    }

    public String getName(){
        return name;
    }

    public String getHref(){
        return href;
    }

    public String getId(){
        return id;
    }

    public Type getType(){
        return type;
    }

    public ExternalUrls getExternalUrls(){
        return externalUrls;
    }

    public String getUri(){
        return uri;
    }
    public Artist() {
        images= new ArrayList<>();
        name= "Ryuk";
    }


    public void setId(String id) {
        this.id = id;
    }

    public Followers getFollowers() {
        return followers;
    }

    public void setFollowers(Followers followers) {
        this.followers = followers;
    }

    public List<genre> getGenres() {
        return genres;
    }

    public void setGenres(List<genre> genres) {
        this.genres = genres;
    }


    public void setName(String name) {
        this.name = name;
    }

    public int getPopularity() {
        return popularity;
    }


    public void setPopularity(int popularity) {
        this.popularity = popularity;
    }
public void addGenre(genre genre){
        this.genres.add(genre);
}


    public void setType(Type type) {
        this.type = type;
    }

    public List<Image> getImages() {
        return images;
    }
    public void  addImages(Image image){
        images.add(image);
    }

    public void setImages(List<Image> images) {
        this.images = images;
    }

    @Override
    public String toString() {
        return "Artist{" +
                "followers=" + followers +
                ", genres=" + genres +
                ", name='" + name + '\'' +
                ", popularity=" + popularity +
                ", id='" + id + '\'' +
                ", type=" + type +
                ", images=" + images.toString() +
                '}';
    }

    public  GeneralItem  toGeneralItem(){
        GeneralItem item;
        if (images!=null && images.size()>0)
         item= new GeneralItem(id, name, type, images.get(0).url, "followers "+followers.getTotal(), null);
        else{
            item= new GeneralItem(id, name, type, "https://consequenceofsound.net/wp-content/uploads/2015/10/screen-shot-2015-10-17-at-6-57-13-pm.png", "followers "+followers.getTotal(), null);

        }

        System.out.println("GeneralItem generado: " + item.toString());
        return item;
    }
}
/* 
File: .\java\com\example\meowtify\models\ArtistsItem.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

public class ArtistsItem{

	@SerializedName("name")
	private String name;

	@SerializedName("href")
	private String href;

	@SerializedName("id")
	private String id;

	@SerializedName("type")
	private String type;

	@SerializedName("external_urls")
	private ExternalUrls externalUrls;

	@SerializedName("uri")
	private String uri;

	public String getName(){
		return name;
	}

	public String getHref(){
		return href;
	}

	public String getId(){
		return id;
	}

	public String getType(){
		return type;
	}

	public ExternalUrls getExternalUrls(){
		return externalUrls;
	}

	public String getUri(){
		return uri;
	}
}/* 
File: .\java\com\example\meowtify\models\Data.java     
/* 
package com.example.meowtify.models;

import java.util.List;

public class Data {
    private String count;
    private String next;
    private String previous;
    private List<Data> results;

    public String getCount() {
        return count;
    }

    public void setCount(String count) {
        this.count = count;
    }

    public String getNext() {
        return next;
    }

    public void setNext(String next) {
        this.next = next;
    }

    public String getPrevious() {
        return previous;
    }

    public void setPrevious(String previous) {
        this.previous = previous;
    }

    public List<Data> getResults() {
        return results;
    }

    public void setResults(List<Data> results) {
        this.results = results;
    }
}
/* 
File: .\java\com\example\meowtify\models\ExternalIds.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

public class ExternalIds{

	@SerializedName("isrc")
	private String isrc;

	public String getIsrc(){
		return isrc;
	}
}/* 
File: .\java\com\example\meowtify\models\ExternalUrls.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

public class ExternalUrls{

	@SerializedName("spotify")
	private String spotify;

	public String getSpotify(){
		return spotify;
	}
}/* 
File: .\java\com\example\meowtify\models\Followers.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

public class Followers{

	@SerializedName("total")
	private int total;

	@SerializedName("href")
	private Object href;

	public int getTotal(){
		return total;
	}

	public Object getHref(){
		return href;
	}

	@Override
 	public String toString(){
		return 
			"Followers{" + 
			"total = '" + total + '\'' + 
			",href = '" + href + '\'' + 
			"}";
		}
}/* 
File: .\java\com\example\meowtify\models\GeneralItem.java     
/* 
package com.example.meowtify.models;

import java.io.Serializable;

public class GeneralItem implements Serializable {
    private String id, name, image, extra1, extra2;
    Type type;

    public GeneralItem(String id, String name, Type type, String image, String extra1, String extra2) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.image = image;
        this.extra1 = extra1;
        this.extra2 = extra2;
    }

    public GeneralItem() {
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public Type getType() {
        return type;
    }

    public String getImage() {
        return image;
    }

    public String getExtra1() {
        return extra1;
    }

    public String getExtra2() {
        return extra2;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setType(Type type) {
        this.type = type;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public void setExtra1(String extra1) {
        this.extra1 = extra1;
    }

    public void setExtra2(String extra2) {
        this.extra2 = extra2;
    }

    @Override
    public String toString() {
        return "GeneralItem{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", image='" + image + '\'' +
                ", extra1='" + extra1 + '\'' +
                ", extra2='" + extra2 + '\'' +
                ", type=" + type +
                '}';
    }
}
/* 
File: .\java\com\example\meowtify\models\genre.java     
/* 
package com.example.meowtify.models;

public enum  genre{

        dance_pop,latin,miami_hip_hop,pop,pop_dance,pop_rap,
      acoustic, afrobeat,
              alt_rock,
              alternative,
              ambient,
              anime,
              black_metal,
              bluegrass,
              blues,
              bossanova,
              brazil,
              breakbeat,
              british,
              cantopop,
              chicago_house,
              children,
              chill,
              classical,
              club,
              comedy,
              country,
              dance,
              dancehall,
              death_metal,
              deep_house,
              detroit_techno,
              disco,
              disney,
              drum_and_bass,
              dub,
              dubstep,
              edm,
              electro,
              electronic,
              emo,
              folk,
              forro,
              french,
              funk,
              garage,
              german,
              gospel,
              goth,
              grindcore,
              groove,
              grunge,
              guitar,
              happy,
              hard_rock,
              hardcore,
              hardstyle,
              heavy_metal,
              hip_hop,
              holidays,
              honky_tonk,
              house,
              idm,
              indian,
              indie,
              indie_pop,
              industrial,
              iranian,
              j_dance,
              j_idol,
              j_pop,
              j_rock,
              jazz,
              k_pop,
              kids,
              latino,
              malay,
              mandopop,
              metal,
              metal_misc,
              metalcore,
              minimal_techno,
              movies,
              mpb,
              new_age,
              new_release,
              opera,
              pagode,
              party,
              philippines_opm,
              piano,
              pop_film,
              post_dubstep,
              power_pop,
              progressive_house,
              psych_rock,
              punk,
              punk_rock,
              r_n_b,
              rainy_day,
              reggae,
              reggaeton,
              road_trip,
              rock,
              rock_n_roll,
              rockabilly,
              romance,
              sad,
              salsa,
              samba,
              sertanejo,
              show_tunes,
              singer_songwriter,
              ska,
              sleep,
              songwriter,
              soul,
              soundtracks,
              spanish,
              study,
              summer,
              swedish,
              synth_pop,
              tango,
              techno,
              trance,
              trip_hop,
              turkish,
              work_out,
              world_music
}
/* 
File: .\java\com\example\meowtify\models\Image.java     
/* 
package com.example.meowtify.models;

public class Image {
    public  int height;
    public int width;
    public String url;

    public Image(int height, int width, String url) {
        this.height = height;
        this.width = width;
        this.url = url;
    }   

    public Image() {
    }

    public int getHeight() {
        return height;
    }

    public void setHeight(int height) {
        this.height = height;
    }

    public int getWidth() {
        return width;
    }

    public void setWidth(int width) {
        this.width = width;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @Override
    public String toString() {
        return "Image{" +
                "height=" + height +
                ", width=" + width +
                ", url='" + url + '\'' +
                '}';
    }
}
/* 
File: .\java\com\example\meowtify\models\Playlist.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Playlist {
    boolean colaborative = false;
     @SerializedName("followers")
    private Followers followers;    String description;

    String href;
    String id;
    Image[]  images;
    String name;
    User owner;
    boolean isPublic;
    String snapshotId;
   List<Song> songs= new ArrayList<>();
    Type type;

    public  GeneralItem  toGeneralItem(){
        GeneralItem item;
        if (images!=null && images.length!=0){
         item= new GeneralItem(id, name, type,images[0].url, owner.display_name, null);
        }else {
         item= new GeneralItem(id, name, type, "https://www.futuro.cl/wp-content/uploads/2020/06/145d9c203f45af092d3ab58de5ab9518-590x340.jpg", owner.display_name, null);

        }
        System.out.println("GeneralItem generado: " + item.toString());
 return item;
    }

    public Playlist() {
        songs= new ArrayList<>();
    }

    public Playlist(boolean colaborative, Followers followers, String description, String href, String id, Image[] images, String name, User owner, boolean isPublic, String snapshotId, List<Song> songs, Type type) {
        this.colaborative = colaborative;
        this.followers = followers;
        this.description = description;
        this.href = href;
        this.id = id;
        this.images = images;
        this.name = name;
        this.owner = owner;
        this.isPublic = isPublic;
        this.snapshotId = snapshotId;
    //    this.tracks = tracks;
        this.type = type;
        songs= new ArrayList<>();
    }

    public boolean isColaborative() {
        return colaborative;
    }

    public void setColaborative(boolean colaborative) {
        this.colaborative = colaborative;
    }

    public Followers getFollowers() {
        return followers;
    }

    public void setFollowers(Followers followers) {
        this.followers = followers;
    }

    public String getHref() {
        return href;
    }

    public void setHref(String href) {
        this.href = href;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Image[] getImages() {
        return images;
    }

    public void setImages(Image[] images) {
        this.images = images;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }

    public boolean isPublic() {
        return isPublic;
    }

    public void setPublic(boolean aPublic) {
        isPublic = aPublic;
    }

    public String getSnapshotId() {
        return snapshotId;
    }

    public void setSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
    }


    public List<Song> getSongs() {
        return songs;
    }

    public Type getPlaylist() {
        return type;
    }

    public void setPlaylist(Type playlist) {
        this.type = playlist;
    }

    public String getIdPlaylist() {
        return "notImplemented";
    }
public void AddSong(Song s){
        songs.add(s);
}
    @Override
    public String toString() {
        return "Playlist{" +
                "colaborative=" + colaborative +
                ", followers=" + followers +
                ", description='" + description + '\'' +
                ", href='" + href + '\'' +
                ", id='" + id + '\'' +
                ", images=" + Arrays.toString(images).toString() +
                ", name='" + name + '\'' +
                ", owner=" + owner.toString() +
                ", isPublic=" + isPublic +
                ", snapshotId='" + snapshotId + '\'' +
                ", tracks=" + songs +
                ", type=" + type +
                '}';
    }
}
/* 
File: .\java\com\example\meowtify\models\Song.java     
/* 
package com.example.meowtify.models;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Random;

public class Song {
    public String getIdSong() {
        return "  notimplemented";
    }
    public String name;
public int popularity;
@SerializedName("release_date")
      private Date release_date;
    private    List<Artist> artists;

    private   String grupo;
    private   Image[] images;
    private  Album album;
    private  int duration_ms;
@SerializedName("preview_url")
    private String preview_url;
    private  Type type;
    //bottom fragment sheet
    //musica youtube

    private String id;

    public  GeneralItem  toGeneralItem(){
        //todo aqui hay error en alguna list
        GeneralItem item= new GeneralItem(id, name, type, "https://i.scdn.co/image/0f057142f11c251f81a22ca639b7261530b280b2", artists.get(0).getName(), album.getName());

        if(album.getImages().size() > 0) item.setImage(album.getImages().get(0).getUrl());

        System.out.println("GeneralItem generado: " + item.toString());
        return item;
    }
    public  GeneralItem  toGeneralItem(String url,String name){
        GeneralItem item= new GeneralItem(id, name, type,  url, artists.get(0).getName(), name);

        System.out.println("GeneralItem generado: " + item.toString());
        return item;
    }

    public  GeneralItem  toGeneralItemArtist(){
        GeneralItem item= new GeneralItem(id, name, type, album.getImages().get(0).getUrl(), popularity+"/100", null);

        System.out.println("GeneralItem generado: " + item.toString());
        return item;
    }

    public Song(String id, String name,Date release_date, int popularity) {
        this.name = name;
        this.id = id;
        this.release_date=release_date;
        this.popularity=popularity;

    }

    public Song(String name, String preview_url, String id) {
        this.name = name;
        this.preview_url = preview_url;
        this.id = id;
    }
public  Song(){
    Random random= new Random();
    artists= new ArrayList<>();

        artists.add(new Artist( ));
        name="Test Song" + random.nextInt()*30;
        id="" + random.nextInt(100000);


}
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPopularity() {
        return popularity;
    }

    public Date getRelease_date() {
        return release_date;
    }

    public List<Artist> getArtists() {
        return artists;
    }

    public String getGrupo() {
        return grupo;
    }

    public Image[] getImages() {
        return images;
    }

    public Album getAlbum() {
        return album;
    }

    public int getDuration_ms() {
        return duration_ms;
    }

    public String getPreview_url() {
        return preview_url;
    }

    public Type getType() {
        return type;
    }

    @Override
    public String toString() {
        return "Song{" +
                "name='" + name + '\'' +
                ", popularity=" + popularity +
                ", release_date=" + release_date +
                ", artists=" + artists +
                ", grupo='" + grupo + '\'' +
                ", images=" + Arrays.toString(images) +
                ", album=" + album +
                ", duration_ms=" + duration_ms +
                ", preview_url='" + preview_url + '\'' +
                ", type=" + type +
                ", id='" + id + '\'' +
                '}';
    }

    public void setAlbum(Album album) {
        this.album = album;
    }
}
/* 
File: .\java\com\example\meowtify\models\Type.java     
/* 
package com.example.meowtify.models;

public enum Type {
    track,album, artist, playlist

}
/* 
File: .\java\com\example\meowtify\models\User.java     
/* 
package com.example.meowtify.models;

public class User {
    public String birthdate;
    public String country;
    public String display_name;
    public String email;
    public String id;

    public String getDisplayName() {
        return display_name;
    }

    public User(String display_name) {
        this.display_name = display_name;
    }

    @Override
    public String toString() {
        return "User{" +
                "birthdate='" + birthdate + '\'' +
                ", country='" + country + '\'' +
                ", display_name='" + display_name + '\'' +
                ", email='" + email + '\'' +
                ", id='" + id + '\'' +
                '}';
    }

    public String getId() {
        return id;
    }
}
/* 
File: .\java\com\example\meowtify\models\UserService.java     
/* 
package com.example.meowtify.models;

import android.content.SharedPreferences;

import com.android.volley.AuthFailureError;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonObjectRequest;
import com.example.meowtify.VolleyCallBack;
import com.google.gson.Gson;

import java.util.HashMap;
import java.util.Map;

public class UserService {

    private static final String ENDPOINT = "https://api.spotify.com/v1/me";
    private SharedPreferences msharedPreferences;
    private RequestQueue mqueue;
    private User user;

    public UserService(RequestQueue queue, SharedPreferences sharedPreferences) {
        mqueue = queue;
        msharedPreferences = sharedPreferences;
    }

    public User getUser() {
        return user;
    }

    public void get(final VolleyCallBack callBack) {
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(ENDPOINT, null, response -> {
            Gson gson = new Gson();
            user = gson.fromJson(response.toString(), User.class);

            callBack.onSuccess();
        }, error -> get(() -> {

        })) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = msharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        mqueue.add(jsonObjectRequest);
    }


}/* 
File: .\java\com\example\meowtify\services\AlbumService.java     
/* 
package com.example.meowtify.services;

import android.content.Context;
import android.content.SharedPreferences;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.meowtify.VolleyCallBack;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class AlbumService {
    boolean lastCheck;
    List<Album> newReleases = new ArrayList<>();
    List<Album> userSavedAlbums = new ArrayList<>();
    List<Playlist> developersPlaylist = new ArrayList<>();
    Album lastAlbum;
    private SharedPreferences sharedPreferences;
    private RequestQueue queue;

    public AlbumService(Context context) {
        sharedPreferences = context.getSharedPreferences("SPOTIFY", 0);
        queue = Volley.newRequestQueue(context);
    }

    public List<Album> getNewReleases() {
        return newReleases;
    }

    public List<Album> getUserSavedAlbums() {
        return userSavedAlbums;
    }

    public List<Album> getNewReleases(final VolleyCallBack callBack, String country, int limit, int offset) {
        String endpoint = "https://api.spotify.com/v1/browse/new-releases?country=" + country + "&limit=" + limit + "&offset=" + offset;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    System.out.println("Response :  " + response.toString());
                    Gson gson = new Gson();
                    JSONObject jsonObject = response.optJSONObject("albums");
                    JSONArray jsonArray = null;
                    try {
                        jsonArray = jsonObject.getJSONArray("items");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    try {
                        assert jsonArray != null;
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                            System.out.println("print new releases album" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Album a = gson.fromJson(object1.toString(), Album.class);
                            System.out.println(a.toString());
                            newReleases.add(a);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error");
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

        return newReleases;
    }
   public List<Album> getUserSavedAlbums(final VolleyCallBack callBack, String market, int limit, int offset) {
        String endpoint = "https://api.spotify.com/v1/me/albums?limit=" + limit + "&offset="+offset+"&market=" + market;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    System.out.println("Response :  " + response.toString());
                    Gson gson = new Gson();
                     JSONArray jsonArray = null;
                    try {
                        jsonArray = response.getJSONArray("items");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    try {
                        assert jsonArray != null;
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                            object1=object1.getJSONObject("album");
                            System.out.println("print used saved album album" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Album a = gson.fromJson(object1.toString(), Album.class);
                            System.out.println(a.toString());
                            userSavedAlbums.add(a);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error" + error.getMessage());
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

        return newReleases;
    }



    public void getAlbumByRef(final VolleyCallBack callBack, String albumId) {
        String endpoint = "https://api.spotify.com/v1/albums/" + albumId;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson = new Gson();
                    System.out.println("JSON: " + response.toString());
                    Album p = gson.fromJson(response.toString(), Album.class);
                    System.out.println("Album p " + p.toString());
                    lastAlbum = p;
                    getSongsOfAnAlbum(callBack, p.getId(), "ES", 10, 0);

                }, error -> {
                     System.out.println(error.getMessage());
                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

    }

    public Album getLastAlbum() {
        return lastAlbum;
    }

    //todo give the bool and method a better name
    public boolean isLastCheck() {
        return lastCheck;
    }

    public List<Song> getSongsOfAnAlbum(final VolleyCallBack callBack, String id, String market, int limit, int offset) {
        String endpoint = "https://api.spotify.com/v1/albums/" + id + "/tracks?market=" + market + "&limit=" + limit + "&offset=" + offset;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson = new Gson();
                    JSONArray jsonArray = response.optJSONArray("items");

                    for (int n = 0; n < jsonArray.length(); n++) {
                        try {
                            JSONObject object = jsonArray.getJSONObject(n);

                            Song song = gson.fromJson(object.toString(), Song.class);
                            System.out.println(song.toString());
                            lastAlbum.addSong(song);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                    callBack.onSuccess();

                }, error -> {
                    // TODO: Handle error

                    System.out.println(error.getMessage());
                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);
        return lastAlbum.getSongs();
    }


    public AtomicBoolean checkIfTheUserSavedAAlbum(final VolleyCallBack callBack, String albumId) {
        AtomicBoolean user = new AtomicBoolean(false);
        String endpoint = "https://api.spotify.com/v1/me/albums/contains?ids=" + albumId ;
        JsonArrayRequest jsonObjectRequest = new JsonArrayRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        for (int n = 0; n < response.length(); n++) {
                            user.set(response.getBoolean(n));
                             lastCheck = user.get();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();

                }, error -> {
                     System.out.println("error on error " + error.toString() + error.getMessage() + error.getLocalizedMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }

        };
        queue.add(jsonObjectRequest);
        return user;
    }

    public void saveAlbumToUserLibrary(Album album) {
        JSONObject payload = preparePutPayload(album);
        System.out.println("Album to upload" + " = " + album.getId());
        JsonObjectRequest jsonObjectRequest = prepareSaveAlbumRequest(payload, album.getId());
        queue.add(jsonObjectRequest);
    }

    private JsonObjectRequest prepareSaveAlbumRequest(JSONObject payload, String id) {
        return new JsonObjectRequest(Request.Method.PUT, "https://api.spotify.com/v1/me/albums?ids=" + id , payload, response -> {
        }, error -> {
            System.out.println(error.getMessage());
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JsonObjectRequest prepareUnsaveAlbumRequest(JSONObject payload, String id) {
        return new JsonObjectRequest(Request.Method.DELETE, "https://api.spotify.com/v1/me/albums?ids=" + id , payload, response -> {
        }, error -> {
            System.out.println(error.getMessage());
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JSONObject preparePutPayload(Album album) {
        JSONObject ids = new JSONObject();
        try {
            ids.put("public", true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return ids;
    }

    public void unsaveAnAlbum(Album album) {
        JSONObject payload = new JSONObject();
        System.out.println("ID to remove of saved albums" + " = " + album.getId());
        JsonObjectRequest jsonObjectRequest = prepareUnsaveAlbumRequest(payload, album.getId());
        queue.add(jsonObjectRequest);
    }


}


/* 
File: .\java\com\example\meowtify\services\ArtistService.java     
/* 
package com.example.meowtify.services;

import android.content.Context;
import android.content.SharedPreferences;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.meowtify.Utilities;
import com.example.meowtify.VolleyCallBack;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class ArtistService {
    public List<Artist> relatedArtist = new ArrayList<>();
    public Artist lastSearchedArtist;
    private ArrayList<Artist> artists = new ArrayList<>();
    private ArrayList<Album>  albumsLastArtist = new ArrayList<>();
    private ArrayList<Song> topSongsLastArtist = new ArrayList<>();
    List<Artist> userFollowedArtists=new ArrayList<>();
//todo pasar a list de lists

    private SharedPreferences sharedPreferences;
    private RequestQueue queue;

    public List<Artist> getUserFollowedArtists() {
        System.out.println("FOLLOWED ARTISTS" + userFollowedArtists.toString());
        return userFollowedArtists;
    }

    public ArrayList<Song> getTopSongsLastArtist() {
        return topSongsLastArtist;
    }

    public List<Artist> getRelatedArtist() {
        return relatedArtist;
    }

    public ArrayList<Album> getAlbumsLastArtist() {
        return albumsLastArtist;
    }

    public ArtistService(Context context) {
        sharedPreferences = context.getSharedPreferences("SPOTIFY", 0);
        queue = Volley.newRequestQueue(context);

    }

    public Artist getLastSearchedArtist() {
        return lastSearchedArtist;
    }

    public ArrayList<Artist> getArtists() {
        return artists;
    }

    public Artist getArtistByid(String id, final VolleyCallBack callBack) {
        String endpoint = "https://api.spotify.com/v1/artists/" + id;


        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson= new Gson();
                    Artist artist = gson.fromJson(response.toString(),Artist.class);
                    lastSearchedArtist = artist;
                    System.out.println("The artist" + artist.toString());
                    callBack.onSuccess();
                }, error -> {
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                return Utilitis.getHeaders(sharedPreferences.getString("token", ""));
            }
        };
        queue.add(jsonObjectRequest);

        return getLastSearchedArtist();
    }

    public List<Artist> getRelatedArtists(final VolleyCallBack callBack, String id) {
        String endpoint = "https://api.spotify.com/v1/artists/" + id + "/related-artists";
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        JSONArray jsonArray = response.getJSONArray("artists");
                        Gson gson = new Gson();
                        for (int n = 0; n < jsonArray.length(); n++) {
                            try {
                                JSONObject jsonObject = jsonArray.getJSONObject(n);
                                relatedArtist.add(gson.fromJson(jsonObject.toString(), Artist.class));
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();
                }, error -> {
                    System.out.println("error" + error.getMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                return Utilitis.getHeaders(sharedPreferences.getString("token", ""));
            }
        };
        queue.add(jsonObjectRequest);

        return relatedArtist;
    }
    public List<Artist> getUserFollowedArtists(final VolleyCallBack callBack, int limit) {
        String endpoint = "https://api.spotify.com/v1/me/following?type=artist&limit=" + limit;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        JSONObject jsonObject= response.getJSONObject("artists");
                        JSONArray jsonArray = jsonObject.getJSONArray("items");
                        Gson gson = new Gson();
                        for (int n = 0; n < jsonArray.length(); n++) {
                            try {
                                 jsonObject = jsonArray.getJSONObject(n);
                                System.out.println("USER FOLLOWED ARTISTS");
                                userFollowedArtists.add(gson.fromJson(jsonObject.toString(), Artist.class));
                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();
                }, error -> {
                    System.out.println("error" + error.getMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                return Utilitis.getHeaders(sharedPreferences.getString("token", ""));
            }
        };
        queue.add(jsonObjectRequest);

        return relatedArtist;
    }
    public List<Album> getArtistAlbums(final VolleyCallBack callBack,String id, String market, int limit, int offset) {
        //todo aqui hay un parametro hardcodeado
        String endpoint = "\thttps://api.spotify.com/v1/artists/"+id+"/albums?include_groups=single%2Cappears_on&market="+ market + "&limit=" + limit + "&offset="+offset;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    System.out.println("Response :  " + response.toString());
                    Gson gson = new Gson();
                    JSONArray jsonArray = null;
                    try {
                        jsonArray = response.getJSONArray("items");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    try {
                        assert jsonArray != null;
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                             System.out.println("print used saved album album" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Album a = gson.fromJson(object1.toString(), Album.class);
                            System.out.println(a.toString());
                            albumsLastArtist.add(a);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error" + error.getMessage());
                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
            return Utilitis.getHeaders(sharedPreferences.getString("token", ""));
             }
        };
        queue.add(jsonObjectRequest);

        return albumsLastArtist;
    }
    public List<Song> getTopSongsOfAnArtist(final VolleyCallBack callBack, String id, String market ) {
        String endpoint = "https://api.spotify.com/v1/artists/" + id + "/top-tracks?market=" + market ;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson = new Gson();
                    JSONArray jsonArray = response.optJSONArray("tracks");
                    for (int n = 0; n < jsonArray.length(); n++) {
                        try {
                            JSONObject object = jsonArray.getJSONObject(n);

                            Song song = gson.fromJson(object.toString(), Song.class);
                            System.out.println("TOP SONG" + song.toString());
                            topSongsLastArtist.add(song);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                    callBack.onSuccess();

                }, error -> {
                    System.out.println(error.getMessage());
                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
              return Utilitis.getHeaders( sharedPreferences.getString("token", ""));
            }
        };
        queue.add(jsonObjectRequest);
        return topSongsLastArtist;
    }



     public void unfollowAArtist(Artist artist) {
         JSONObject payload = new JSONObject();
         System.out.println("ID to follow" + " = " + artist.getId());
         JsonObjectRequest jsonObjectRequest = prepareUnfollowArtistRequest(payload, artist.getId());
         queue.add(jsonObjectRequest);
     }

     public AtomicBoolean checkIfTheUserFollowsAArtist(final VolleyCallBack callBack, String artistId) {
         AtomicBoolean user = new AtomicBoolean(false);
         String endpoint = "https://api.spotify.com/v1/me/following/contains?type=artist&ids=" + artistId;
         JsonArrayRequest jsonArrayRequest = new JsonArrayRequest
                 (Request.Method.GET, endpoint, null, response -> {
                     try {
                         for (int n = 0; n < response.length(); n++) {
                             user.set(response.getBoolean(n));

                             System.out.println("User is in the playlist " + user);
                             lastCheck = user.get();
                         }

                     } catch (JSONException e) {
                         e.printStackTrace();
                     }
                     callBack.onSuccess();

                 }, error -> {
                     // TODO: Handle error
                     System.out.println("error on error " + error.toString() + error.getMessage() + error.getLocalizedMessage());

                 }) {
             @Override
             public Map<String, String> getHeaders() throws AuthFailureError {
                 Map<String, String> headers = new HashMap<>();
                 String token = sharedPreferences.getString("token", "");
                 String auth = "Bearer " + token;
                 headers.put("Authorization", auth);
                 return headers;
             }

         };
         queue.add(jsonArrayRequest);
         return user;
     }
     boolean lastCheck;
     //todo give the bool and methos a better name
     public boolean isLastCheck() {
         return lastCheck;
     }
     public void followAnArtist(Artist artist) {
         JSONObject payload = preparePutPayload();
         System.out.println("ID to follow" + " = " + artist.getId());
         JsonObjectRequest jsonObjectRequest = prepareFollowArtistRequest(payload, artist.getId());
         queue.add(jsonObjectRequest);
     }

     private JsonObjectRequest prepareFollowArtistRequest(JSONObject payload, String id) {
         return new JsonObjectRequest(Request.Method.PUT, "https://api.spotify.com/v1/me/following?type=artist&ids=" + id , payload, response -> {
         }, error -> {
         }) {
             @Override
             public Map<String, String> getHeaders() throws AuthFailureError {
                 Map<String, String> headers = new HashMap<>();
                 String token = sharedPreferences.getString("token", "");
                 String auth = "Bearer " + token;
                 headers.put("Authorization", auth);
                 headers.put("Content-Type", "application/json");
                 return headers;
             }
         };
     }

     private JsonObjectRequest prepareUnfollowArtistRequest(JSONObject payload, String id) {
         return new JsonObjectRequest(Request.Method.DELETE, "https://api.spotify.com/v1/me/following?type=artist&ids=" + id , payload, response -> {
         }, error -> {
         }) {
             @Override
             public Map<String, String> getHeaders() throws AuthFailureError {
                 Map<String, String> headers = new HashMap<>();
                 String token = sharedPreferences.getString("token", "");
                 String auth = "Bearer " + token;
                 headers.put("Authorization", auth);
                 headers.put("Content-Type", "application/json");
                 return headers;
             }
         };
     }
    private JSONObject preparePutPayload() {

        JSONObject ids = new JSONObject();
        try {
            ids.put("public", true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return ids;
    }

}/* 
File: .\java\com\example\meowtify\services\MediaPlayerService.java     
/* 
package com.example.meowtify.services;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.Binder;
import android.os.IBinder;
import android.view.View;

import com.example.meowtify.models.Song;
import com.example.meowtify.services.notifications.Playable;

import java.io.IOException;

public class MediaPlayerService extends Service implements MediaPlayer.OnCompletionListener {
     static  MediaPlayer mediaPlayer;
    Song currentSong;
    IBinder mBinder = new LocalBinder();

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    @Override
    public void onCreate() {

        mediaPlayer = new MediaPlayer();

    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (!mediaPlayer.isPlaying()) {
            mediaPlayer.start();
        }
        return START_STICKY;
    }

    public void onDestroy() {
        if (mediaPlayer.isPlaying()) {
            mediaPlayer.stop();
        }
        mediaPlayer.release();
    }
 public static  boolean isPlaying(){
        return mediaPlayer.isPlaying();
 }

    public static void pause() {
        mediaPlayer.pause();

    }

    public void changeSong(Song song) {
        if (currentSong == null || (!song.getId().equals(currentSong.getId()))) {
            start(song.getPreview_url());
            currentSong = song;
        }

    }

    public void start() {
        mediaPlayer.start();
        System.out.println("started playing");
    }
View v;
    public void start(String url) {
        if (mediaPlayer.isPlaying()) mediaPlayer.stop();
        mediaPlayer.release();
        mediaPlayer = new MediaPlayer();
        try {
            if (url == null)
                url = "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3";

            mediaPlayer.setDataSource(url);

            mediaPlayer.prepare();
        } catch (IOException e) {
            e.printStackTrace();
        }

        mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
            @Override
            public void onPrepared(MediaPlayer playerM){
                mediaPlayer.start();
                System.out.println("started playing");
            }
        });
        mediaPlayer.setOnCompletionListener(this);

    }

    public void changeProgress(int newProgress) {
        mediaPlayer.pause();
        mediaPlayer.seekTo(newProgress);
        mediaPlayer.start();
    }

    public static void resume() {
        if (!mediaPlayer.isPlaying())
            mediaPlayer.start();
    }

    public int getCurrentPositionInMillisecons() {
        return mediaPlayer.getCurrentPosition();
    }

    public int getMaxDurationInMillisecons() {
        return mediaPlayer.getDuration();
    }

    public void onCompletion(MediaPlayer _mediaPlayer) {

         }

    public class LocalBinder extends Binder {
        public MediaPlayerService getServerInstance() {
            return MediaPlayerService.this;
        }
    }
}

/* 
File: .\java\com\example\meowtify\services\PlaylistService.java     
/* 
package com.example.meowtify.services;

import android.content.Context;
import android.content.SharedPreferences;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.meowtify.VolleyCallBack;
import com.example.meowtify.models.Album;
import com.example.meowtify.models.Artist;
import com.example.meowtify.models.GeneralItem;
import com.example.meowtify.models.Playlist;
import com.example.meowtify.models.Song;
import com.example.meowtify.models.Type;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class PlaylistService {
    public List<GeneralItem> lastSearched;
    String token = "ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B";
    String token2 = "BQBmx65FSMiYCKgQh-_0LHs-_GrOAiHlfcKc1x8oaoDxhUDP7FsLghn9N0MSJaSt8wLofLAePIO0zcZTL8z_pUIuieiWp47T8YYlQ8dRKAB7zFCNnhoDa86pyYLbBhEFXCd5QHeDH9GYm771YZe15TeAwQuPMUKrM2Ej2bRKYjyWvQ0vHnzt9vziMU8nB4cPjKDFpD3CnoRyHbTZVDIUz4fzif4Ul3a6XIVgDxXXCLBoy2dYtn5tmCXl-tTpntdmR-WNVHzdmYMeY-ujttt_XXOuh8TPiiSI71zuVKExgwyl";
    //
    boolean lastCheck;
    Playlist lastSearchedPlaylist;
    List<Album> newReleases = new ArrayList<>();
    List<Playlist> developersPlaylist = new ArrayList<>();
    private SharedPreferences sharedPreferences;
    private RequestQueue queue;
    private ArrayList<Playlist> playlists = new ArrayList<>();
    private ArrayList<Playlist> featuredPlaylists = new ArrayList<>();

    public Playlist getLastSearchedPlaylist() {
        return lastSearchedPlaylist;
    }

    public PlaylistService(Context context) {
        sharedPreferences = context.getSharedPreferences("SPOTIFY", 0);
        queue = Volley.newRequestQueue(context);
    }

    public ArrayList<Playlist> getPlaylists() {
        System.out.println(playlists.toString() + "Vendetta");
        return playlists;
    }

    public ArrayList<Playlist> getFeaturedPlaylistsPlaylists() {
        System.out.println(playlists.toString() + "Vendetta");
        return featuredPlaylists;
    }


    public List<Playlist> getUserPlayLists(final VolleyCallBack callBack, int max, int offset) {
        List<Playlist> playlists = new ArrayList<>();
        String endpoint = "https://api.spotify.com/v1/me/playlists?limit=" + max + "&offset=" + offset;

        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    System.out.println("Response :  " + response.toString());
                    Gson gson = new Gson();
                    JSONArray jsonArray = null;
                    try {
                        jsonArray = response.getJSONArray("items");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    try {

                        assert jsonArray != null;
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                            System.out.println("print playlist user" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Playlist p = gson.fromJson(object1.toString(), Playlist.class);
                            System.out.println(p.toString());
                            playlists.add(p);
                            this.playlists.add(p);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error");
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

        return playlists;
    }

    public List<Album> getNewReleases() {
        return newReleases;
    }

    public List<Playlist> getDevelopersPlaylist() {
        System.out.println("Developers playlist is " + developersPlaylist.toString());
        return developersPlaylist;
    }

    public List<Album> getNewReleases(final VolleyCallBack callBack, String country, int limit, int offset) {
        String endpoint = "https://api.spotify.com/v1/browse/new-releases?country=" + country + "&limit=" + limit + "&offset=" + offset;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    System.out.println("Response :  " + response.toString());
                    Gson gson = new Gson();
                    JSONObject jsonObject = response.optJSONObject("albums");
                    JSONArray jsonArray = null;
                    try {
                        jsonArray = jsonObject.getJSONArray("items");
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    try {
                        assert jsonArray != null;
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                            System.out.println("print new releases album" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Album a = gson.fromJson(object1.toString(), Album.class);
                            System.out.println(a.toString());
                            newReleases.add(a);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error");
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

        return newReleases;
    }

    public void getAPlayListByRef(final VolleyCallBack callBack, String playlistId) {
        String endpoint = "https://api.spotify.com/v1/playlists/" + playlistId;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        Gson gson = new Gson();
                        System.out.println("JSON: " + response.toString());
                        Playlist p = gson.fromJson(response.toString(), Playlist.class);
                        System.out.println("Playlist p " + p.toString());
                        JSONArray jsonArray =
                                response.getJSONObject("tracks").getJSONArray("items");
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n).getJSONObject("track");
                            System.out.println("last print" + object1.toString());

                            //     object = object.optJSONObject("tracks");
                            Song s = gson.fromJson(object1.toString(), Song.class);
                            System.out.println("Song " + n + ": " + s.toString());
                            p.AddSong(s);

                        }
                        developersPlaylist.add(p);
                        lastSearchedPlaylist=p;

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();
                }, error -> {
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

    }

    //todo give the bool and methos a better name
    public boolean isLastCheck() {
        return lastCheck;
    }

    public List<Playlist> getFeaturedPlayList(final VolleyCallBack callBack) {
        String endpoint = "https://api.spotify.com/v1/browse/featured-playlists";
        List<Playlist> playlists = new ArrayList<>();
        //+"-H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer " + MainActivity.TOKEN;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        Gson gson = new Gson();
                        String message = response.getString("message");
                        System.out.println(message);
                        JSONObject object = response.getJSONObject("playlists");
                        System.out.println(object.toString());
                        JSONArray jsonArray = object.getJSONArray("items");
                        System.out.println(jsonArray.toString());
                        for (int n = 0; n < jsonArray.length(); n++) {

                            JSONObject object1 = jsonArray.getJSONObject(n);
                            System.out.println("last print" + object1.toString());
                            //     object = object.optJSONObject("tracks");
                            Playlist p = gson.fromJson(object1.toString(), Playlist.class);
                            System.out.println(p.toString());
                            featuredPlaylists.add(p);

                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();
                }, error -> {
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);
        return playlists;
    }

    public AtomicBoolean checkIfTheUserFollowsAPlaylist(final VolleyCallBack callBack, String playlistId) {
        AtomicBoolean user = new AtomicBoolean(false);
        String endpoint = "https://api.spotify.com/v1/playlists/" + playlistId + "/followers/contains?ids=" + sharedPreferences.getString("userid", null);
        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        for (int n = 0; n < response.length(); n++) {
                            user.set(response.getBoolean(n));
                            System.out.println("User is in the playlist " + user);
                            lastCheck = user.get();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();

                }, error -> {
                    // TODO: Handle error
                    System.out.println("error on error " + error.toString() + error.getMessage() + error.getLocalizedMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }

        };
        queue.add(jsonArrayRequest);
        return user;
    }

    public void followAPlaylist(Playlist playlist) {
        JSONObject payload = preparePutPayload(playlist);
        System.out.println("ID to follow" + " = " + playlist.getId());
        JsonObjectRequest jsonObjectRequest = prepareFollowPlaylistRequest(payload, playlist.getId());
        queue.add(jsonObjectRequest);
    }
    public void createAPlaylist(String name,String description, boolean isPublic) {
        JSONObject payload = preparePutPayloadUserPlaylist(name,description,isPublic);
         JsonObjectRequest jsonObjectRequest = prepareCreatePlaylistRequest(payload);
        queue.add(jsonObjectRequest);
    }

    private JsonObjectRequest prepareFollowPlaylistRequest(JSONObject payload, String id) {
        return new JsonObjectRequest(Request.Method.PUT, "https://api.spotify.com/v1/playlists/" + id + "/followers", payload, response -> {
        }, error -> {
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }
    private JsonObjectRequest prepareCreatePlaylistRequest(JSONObject payload) {
        return new JsonObjectRequest(Request.Method.POST, "https://api.spotify.com/v1/users/"+sharedPreferences.getString("userid", null) + "/playlists", payload, response -> {
        }, error -> {
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JsonObjectRequest prepareUnfollowPlaylistRequest(JSONObject payload, String id) {
        return new JsonObjectRequest(Request.Method.DELETE, "https://api.spotify.com/v1/playlists/" + id + "/followers", payload, response -> {
        }, error -> {
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JSONObject preparePutPayload(Playlist playlist) {

        JSONObject ids = new JSONObject();
        try {
            ids.put("public", true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return ids;
    }
    private JSONObject preparePutPayloadUserPlaylist(String name, String description, boolean isPublic) {
        JSONObject ids = new JSONObject();
        try {
            ids.put("name", name);
            ids.put("description", description);
            ids.put("public", isPublic);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return ids;
    }

    public List<GeneralItem> search(final VolleyCallBack callBack, String wordsToSearch, List<Type> types, String market, int limit, int offset) {
        String endpoint = "https://api.spotify.com/v1/search?q=" + wordsToSearch + "&type=" + convertTypeListToQueryString(types) + "&market=" + market + "&limit=" + limit + "&offset" + offset;
        List<GeneralItem> result = new ArrayList<>();
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        JSONArray jsonArray = null;
                        Gson gson = new Gson();
                        for (Type t : types) {
                            jsonArray = response.getJSONObject(t.toString() + "s").getJSONArray("items");
                            List<JSONObject> jsonObjects = new ArrayList<>();
                            for (int i = 0; i < jsonArray.length(); i++) {
                                jsonObjects.add(jsonArray.getJSONObject(i));
                            }
                            System.out.println("tHE PRE ERROR LENGTH IS " + jsonArray.length());
                            if (jsonArray==null ||jsonArray.length()!=0){
                            switch (t) {
                                case album:
                                    Album[] a = gson.fromJson(Arrays.toString(jsonObjects.toArray()), Album[].class);
                                    for (Album album : a) {
                                        result.add(album.toGeneralItem());
                                    }
                                    break;
                                case track:
                                    Song[] s = gson.fromJson(Arrays.toString(jsonObjects.toArray()), Song[].class);
                                    for (Song song : s) {
                                        result.add(song.toGeneralItem());
                                    }
                                    break;
                                case playlist:
                                    Playlist[] p = gson.fromJson(Arrays.toString(jsonObjects.toArray()), Playlist[].class);
                                    for (Playlist playlist : p) {
                                        result.add(playlist.toGeneralItem());
                                    }
                                    break;
                                case artist:
                                    Artist[] artists = gson.fromJson(Arrays.toString(jsonObjects.toArray()), Artist[].class);
                                    for (Artist artist : artists) {
                                        result.add(artist.toGeneralItem());
                                    }
                                    break;
                            }}
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                        searchResults=result;
                    callBack.onSuccess();

                }, error -> {
                    // TODO: Handle error
                    System.out.println("error on error " + error.toString() + error.getMessage() + error.getLocalizedMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }

        };
        queue.add(jsonObjectRequest);
        return result;
    }
List<GeneralItem> searchResults= new ArrayList<>();

    public List<GeneralItem> getSearchResults() {
        return searchResults;
    }

    private String convertTypeListToQueryString(List<Type> types) {
        String result = "";
        for (int i = 0; i < types.size(); i++) {
            if (types.size() - 1 != i) {
                result += types.get(i).toString() + "%2C";
            } else {
                result += types.get(i).toString();
            }
        }
        return result;
    }


    public void unfollowAPlaylist(Playlist playlist) {
        JSONObject payload = new JSONObject();
        System.out.println("ID to follow" + " = " + playlist.getId());
        JsonObjectRequest jsonObjectRequest = prepareUnfollowPlaylistRequest(payload, playlist.getId());
        queue.add(jsonObjectRequest);
    }


}
/* 
File: .\java\com\example\meowtify\services\SongService.java     
/* 
package com.example.meowtify.services;

import android.content.Context;
import android.content.SharedPreferences;

import com.android.volley.AuthFailureError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.example.meowtify.VolleyCallBack;
import com.example.meowtify.models.Song;
import com.google.gson.Gson;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

public class SongService {
    //
    public Song lastSearchedSong;
    String token = "ids=7ouMYWpwJ422jRcDASZB7P%2C4VqPOruhp5EdPBeR92t6lQ%2C2takcwOaAZWiXQijPHIx7B";
    String token2 = "BQBmx65FSMiYCKgQh-_0LHs-_GrOAiHlfcKc1x8oaoDxhUDP7FsLghn9N0MSJaSt8wLofLAePIO0zcZTL8z_pUIuieiWp47T8YYlQ8dRKAB7zFCNnhoDa86pyYLbBhEFXCd5QHeDH9GYm771YZe15TeAwQuPMUKrM2Ej2bRKYjyWvQ0vHnzt9vziMU8nB4cPjKDFpD3CnoRyHbTZVDIUz4fzif4Ul3a6XIVgDxXXCLBoy2dYtn5tmCXl-tTpntdmR-WNVHzdmYMeY-ujttt_XXOuh8TPiiSI71zuVKExgwyl";
    private ArrayList<Song> songs = new ArrayList<>();
    private SharedPreferences sharedPreferences;
    private RequestQueue queue;

    public SongService(Context context) {
        sharedPreferences = context.getSharedPreferences("SPOTIFY", 0);
        queue = Volley.newRequestQueue(context);
    }

    public ArrayList<Song> getSongs() {
        return songs;
    }

    public void getASongByRef(final VolleyCallBack callBack, String songId) {
        String endpoint = "https://api.spotify.com/v1/tracks/" + songId;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson = new Gson();
                    System.out.println("JSON: " + response.toString());
                    Song p = gson.fromJson(response.toString(), Song.class);
                    System.out.println("Searched song" + p.toString());
                    lastSearchedSong = p;
                    callBack.onSuccess();
                }, error -> {
                    System.out.println("Error " + error.getMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);

    }

    public Song getLastSearchedSong() {
        return lastSearchedSong;
    }

    public ArrayList<Song> getRecentlyPlayedTracks(final VolleyCallBack callBack) {
        String endpoint = "https://api.spotify.com/v1/me/player/recently-played";
        //+"-H \"Accept: application/json\" -H \"Content-Type: application/json\" -H \"Authorization: Bearer " + MainActivity.TOKEN;
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest
                (Request.Method.GET, endpoint, null, response -> {
                    Gson gson = new Gson();
                    JSONArray jsonArray = response.optJSONArray("items");

                    for (int n = 0; n < jsonArray.length(); n++) {
                        try {
                            JSONObject object = jsonArray.getJSONObject(n);
                            object = object.optJSONObject("track");
                            Song song = gson.fromJson(object.toString(), Song.class);
                            System.out.println(song.toString());
                            songs.add(song);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                    callBack.onSuccess();
                }, error -> {
                    // TODO: Handle error

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }
        };
        queue.add(jsonObjectRequest);
        return songs;
    }


    public void addSongToLibrary(Song song) {
        JSONObject payload = preparePutPayload(song);
        JsonObjectRequest jsonObjectRequest = prepareSongLibraryRequest(payload);
        queue.add(jsonObjectRequest);
    }
    public void removeSongOfLibrary(Song song) {
        JSONObject payload = preparePutPayload(song);
        JsonObjectRequest jsonObjectRequest = prepareUnFavoriteATrackRequest(payload,song.getId());
        queue.add(jsonObjectRequest);
    }
    private JsonObjectRequest prepareUnFavoriteATrackRequest(JSONObject payload, String id) {
        return new JsonObjectRequest(Request.Method.DELETE, "https://api.spotify.com/v1/me/tracks?ids=" + id , payload, response -> {
        }, error -> {
            System.out.println(error.getMessage());
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JsonObjectRequest prepareSongLibraryRequest(JSONObject payload) {
        return new JsonObjectRequest(Request.Method.PUT, "https://api.spotify.com/v1/me/tracks", payload, response -> {
        }, error -> {
        }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };
    }

    private JSONObject preparePutPayload(Song song) {
        JSONArray idarray = new JSONArray();
        idarray.put(song.getId());
        JSONObject ids = new JSONObject();
        try {
            ids.put("ids", idarray);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return ids;
    }
    boolean lastCheck;

    public boolean isLastCheck() {
        return lastCheck;
    }

    public AtomicBoolean checkIfTheUserHasASongInFavorites(final VolleyCallBack callBack, String songId) {
        AtomicBoolean user = new AtomicBoolean(false);
        String endpoint = "https://api.spotify.com/v1/me/tracks/contains?ids=" + songId;
        JsonArrayRequest jsonArrayRequest = new JsonArrayRequest
                (Request.Method.GET, endpoint, null, response -> {
                    try {
                        for (int n = 0; n < response.length(); n++) {
                            user.set(response.getBoolean(n));
                            System.out.println("User has saved this song " + user);
                            lastCheck = user.get();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    callBack.onSuccess();

                }, error -> {
                     System.out.println("error on error " + error.toString() + error.getMessage() + error.getLocalizedMessage());

                }) {
            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                Map<String, String> headers = new HashMap<>();
                String token = sharedPreferences.getString("token", "");
                String auth = "Bearer " + token;
                headers.put("Authorization", auth);
                return headers;
            }

        };
        queue.add(jsonArrayRequest);
        return user;
    }
}/* 
File: .\java\com\example\meowtify\services\notifications\CreateNotification.java     
/* 
package com.example.meowtify.services.notifications;

import android.app.Notification;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.Image;
import android.os.Build;
import android.support.v4.media.session.MediaSessionCompat;

import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;

import com.example.meowtify.R;
import com.example.meowtify.models.Song;
import com.squareup.picasso.Picasso;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

public class CreateNotification {

    public static final String CHANNEL_ID = "channel1";

    public static final String ACTION_PREVIUOS = "actionprevious";
    public static final String ACTION_PLAY = "actionplay";
    public static final String ACTION_NEXT = "actionnext";

    public static Notification notification;

    public static void createNotification(Context context, Song song, int playbutton, int pos, int size){

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){

            NotificationManagerCompat notificationManagerCompat = NotificationManagerCompat.from(context);
            MediaSessionCompat mediaSessionCompat = new MediaSessionCompat( context, "tag");

            Bitmap icon = null;
            try {
                HttpURLConnection connection = (HttpURLConnection) new URL(song.getAlbum().getImages().get(0).url).openConnection();
                connection.setDoInput(true);
                connection.connect();
                icon = BitmapFactory.decodeStream(connection.getInputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }

            PendingIntent pendingIntentPrevious;
            int drw_previous;
            if (pos == 0){
                pendingIntentPrevious = null;
                drw_previous = 0;
            } else {
                Intent intentPrevious = new Intent(context, NotificationActionService.class)
                        .setAction(ACTION_PREVIUOS);
                pendingIntentPrevious = PendingIntent.getBroadcast(context, 0,
                        intentPrevious, PendingIntent.FLAG_UPDATE_CURRENT);
                drw_previous = android.R.drawable.ic_media_previous;
            }

            Intent intentPlay = new Intent(context, NotificationActionService.class)
                    .setAction(ACTION_PLAY);
            PendingIntent pendingIntentPlay = PendingIntent.getBroadcast(context, 0,
                    intentPlay, PendingIntent.FLAG_UPDATE_CURRENT);

            PendingIntent pendingIntentNext;
            int drw_next;
            if (pos == size){
                pendingIntentNext = null;
                drw_next = 0;
            } else {
                Intent intentNext = new Intent(context, NotificationActionService.class)
                        .setAction(ACTION_NEXT);
                pendingIntentNext = PendingIntent.getBroadcast(context, 0,
                        intentNext, PendingIntent.FLAG_UPDATE_CURRENT);
                drw_next = android.R.drawable.ic_media_next;
            }

            //create notification
            if(drw_next == 0 && drw_previous == 0){
                notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                        .setSmallIcon( R.drawable.logo_meowfy)
                        .setContentTitle(song.getName())
                        .setContentText(song.getArtists().get(0).getName())
                        .setLargeIcon(icon)
                        .setOnlyAlertOnce(true)
                        .setShowWhen(false)
                        .addAction(playbutton, "Play", pendingIntentPlay)
                        .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                                .setShowActionsInCompactView(0, 1, 2)
                                .setMediaSession(mediaSessionCompat.getSessionToken()))
                        .setPriority(NotificationCompat.PRIORITY_HIGH)
                        .build();
            }else{
                if(drw_next != 0 && drw_previous != 0){
                    notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                            .setSmallIcon( R.drawable.logo_meowfy)
                            .setContentTitle(song.getName())
                            .setContentText(song.getArtists().get(0).getName())
                            .setLargeIcon(icon)
                            .setOnlyAlertOnce(true)
                            .setShowWhen(false)
                            .addAction(drw_previous, "Previous", pendingIntentPrevious)
                            .addAction(playbutton, "Play", pendingIntentPlay)
                            .addAction(drw_next, "Next", pendingIntentNext)
                            .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                                    .setShowActionsInCompactView(0, 1, 2)
                                    .setMediaSession(mediaSessionCompat.getSessionToken()))
                            .setPriority(NotificationCompat.PRIORITY_HIGH)
                            .build();
                }else{
                    if(drw_next != 0){
                        notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                                .setSmallIcon( R.drawable.logo_meowfy)
                                .setContentTitle(song.getName())
                                .setContentText(song.getArtists().get(0).getName())
                                .setLargeIcon(icon)
                                .setOnlyAlertOnce(true)
                                .setShowWhen(false)
                                .addAction(playbutton, "Play", pendingIntentPlay)
                                .addAction(drw_next, "Next", pendingIntentNext)
                                .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                                        .setShowActionsInCompactView(0, 1, 2)
                                        .setMediaSession(mediaSessionCompat.getSessionToken()))
                                .setPriority(NotificationCompat.PRIORITY_HIGH)
                                .build();
                    }else{
                        notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                                .setSmallIcon( R.drawable.logo_meowfy)
                                .setContentTitle(song.getName())
                                .setContentText(song.getArtists().get(0).getName())
                                .setLargeIcon(icon)
                                .setOnlyAlertOnce(true)
                                .setShowWhen(false)
                                .addAction(drw_previous, "Previous", pendingIntentPrevious)
                                .addAction(playbutton, "Play", pendingIntentPlay)
                                .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                                        .setShowActionsInCompactView(0, 1, 2)
                                        .setMediaSession(mediaSessionCompat.getSessionToken()))
                                .setPriority(NotificationCompat.PRIORITY_HIGH)
                                .build();
                    }
                }
            }
            notification = new NotificationCompat.Builder(context, CHANNEL_ID)
                    .setSmallIcon( R.drawable.logo_meowfy)
                    .setContentTitle(song.getName())
                    .setContentText(song.getArtists().get(0).getName())
                    .setLargeIcon(icon)
                    .setOnlyAlertOnce(true)
                    .setShowWhen(false)
                    .addAction(drw_previous, "Previous", pendingIntentPrevious)
                    .addAction(playbutton, "Play", pendingIntentPlay)
                    .addAction(drw_next, "Next", pendingIntentNext)
                    .setStyle(new androidx.media.app.NotificationCompat.MediaStyle()
                            .setShowActionsInCompactView(0, 1, 2)
                            .setMediaSession(mediaSessionCompat.getSessionToken()))
                    .setPriority(NotificationCompat.PRIORITY_HIGH)
                    .build();

            notificationManagerCompat.notify(1, notification);

        }
    }
}/* 
File: .\java\com\example\meowtify\services\notifications\NotificationActionService.java     
/* 
package com.example.meowtify.services.notifications;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;

public class NotificationActionService extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        context.sendBroadcast(new Intent("TRACKS_TRACKS")
        .putExtra("actionname", intent.getAction()));
    }
}/* 
File: .\java\com\example\meowtify\services\notifications\OnClearFromRecentService.java     
/* 
package com.example.meowtify.services.notifications;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

import androidx.annotation.Nullable;

public class OnClearFromRecentService extends Service {
    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        return START_NOT_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    @Override
    public void onTaskRemoved(Intent rootIntent) {
        stopSelf();
    }
}/* 
File: .\java\com\example\meowtify\services\notifications\Playable.java     
/* 
package com.example.meowtify.services.notifications;

public interface Playable {
    void onTrackPrevious();
    void onTrackPlay();
    void onTrackPause();
    void onTrackNext();
    void onTrackEnd();
}